{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules\\hexo-theme-landscape\\source\\fancybox\\jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-landscape\\source\\fancybox\\jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-landscape\\source\\css\\style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-landscape\\source\\js\\jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-landscape\\source\\js\\script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules\\hexo-theme-landscape\\source\\css\\images\\banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/umami-view.js","path":"js/umami-view.js","modified":0,"renderable":1},{"_id":"source/img/wechat_qrcode.jpg","path":"img/wechat_qrcode.jpg","modified":0,"renderable":0},{"_id":"source/img/hashmap.png","path":"img/hashmap.png","modified":0,"renderable":0},{"_id":"source/img/容器镜像系列教程/容器VS虚拟机.png","path":"img/容器镜像系列教程/容器VS虚拟机.png","modified":0,"renderable":0},{"_id":"source/img/容器镜像系列教程/docker操作流程图.png","path":"img/容器镜像系列教程/docker操作流程图.png","modified":0,"renderable":0}],"Cache":[{"_id":"source\\_posts\\hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1714882942226},{"_id":"source\\_posts\\关于我.md","hash":"e3e8682ec1c4c7e9bc41903c00f671d6ed2fbcf5","modified":1714897043117},{"_id":"node_modules\\hexo-theme-landscape\\LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1714895832982},{"_id":"node_modules\\hexo-theme-landscape\\package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1714895833332},{"_id":"node_modules\\hexo-theme-landscape\\README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1714895833334},{"_id":"node_modules\\hexo-theme-landscape\\_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1714895833377},{"_id":"node_modules\\hexo-theme-landscape\\languages\\de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1714895833380},{"_id":"node_modules\\hexo-theme-landscape\\languages\\de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1714895833379},{"_id":"node_modules\\hexo-theme-landscape\\languages\\default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1714895833383},{"_id":"node_modules\\hexo-theme-landscape\\languages\\en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1714895833386},{"_id":"node_modules\\hexo-theme-landscape\\languages\\es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1714895833393},{"_id":"node_modules\\hexo-theme-landscape\\languages\\es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1714895833391},{"_id":"node_modules\\hexo-theme-landscape\\languages\\fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1714895833394},{"_id":"node_modules\\hexo-theme-landscape\\languages\\hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1714895833398},{"_id":"node_modules\\hexo-theme-landscape\\languages\\fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1714895833396},{"_id":"node_modules\\hexo-theme-landscape\\languages\\en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1714895833389},{"_id":"node_modules\\hexo-theme-landscape\\languages\\en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1714895833387},{"_id":"node_modules\\hexo-theme-landscape\\languages\\hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1714895833399},{"_id":"node_modules\\hexo-theme-landscape\\languages\\it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1714895833400},{"_id":"node_modules\\hexo-theme-landscape\\languages\\ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1714895833405},{"_id":"node_modules\\hexo-theme-landscape\\languages\\it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1714895833401},{"_id":"node_modules\\hexo-theme-landscape\\languages\\ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1714895833406},{"_id":"node_modules\\hexo-theme-landscape\\languages\\ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1714895833403},{"_id":"node_modules\\hexo-theme-landscape\\languages\\nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1714895833411},{"_id":"node_modules\\hexo-theme-landscape\\languages\\ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1714895833407},{"_id":"node_modules\\hexo-theme-landscape\\languages\\mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1714895833408},{"_id":"node_modules\\hexo-theme-landscape\\languages\\nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1714895833413},{"_id":"node_modules\\hexo-theme-landscape\\languages\\mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1714895833410},{"_id":"node_modules\\hexo-theme-landscape\\languages\\th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1714895833423},{"_id":"node_modules\\hexo-theme-landscape\\languages\\pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1714895833416},{"_id":"node_modules\\hexo-theme-landscape\\languages\\no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1714895833414},{"_id":"node_modules\\hexo-theme-landscape\\languages\\ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1714895833418},{"_id":"node_modules\\hexo-theme-landscape\\languages\\ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1714895833419},{"_id":"node_modules\\hexo-theme-landscape\\layout\\archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1714895833173},{"_id":"node_modules\\hexo-theme-landscape\\layout\\index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1714895833243},{"_id":"node_modules\\hexo-theme-landscape\\languages\\tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1714895833425},{"_id":"node_modules\\hexo-theme-landscape\\layout\\category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1714895833206},{"_id":"node_modules\\hexo-theme-landscape\\layout\\page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1714895833259},{"_id":"node_modules\\hexo-theme-landscape\\languages\\th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1714895833424},{"_id":"node_modules\\hexo-theme-landscape\\languages\\zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1714895833427},{"_id":"node_modules\\hexo-theme-landscape\\layout\\tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1714895833279},{"_id":"node_modules\\hexo-theme-landscape\\scripts\\fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1714895833307},{"_id":"node_modules\\hexo-theme-landscape\\languages\\zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1714895833426},{"_id":"node_modules\\hexo-theme-landscape\\layout\\layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1714895833247},{"_id":"node_modules\\hexo-theme-landscape\\layout\\post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1714895833263},{"_id":"node_modules\\hexo-theme-landscape\\languages\\pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1714895833417},{"_id":"node_modules\\hexo-theme-landscape\\layout\\_partial\\archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1714895833131},{"_id":"node_modules\\hexo-theme-landscape\\layout\\_partial\\archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1714895833113},{"_id":"node_modules\\hexo-theme-landscape\\layout\\_partial\\after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1714895833089},{"_id":"node_modules\\hexo-theme-landscape\\layout\\_partial\\article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1714895833182},{"_id":"node_modules\\hexo-theme-landscape\\layout\\_partial\\mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1714895833250},{"_id":"node_modules\\hexo-theme-landscape\\layout\\_partial\\sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1714895833269},{"_id":"node_modules\\hexo-theme-landscape\\layout\\_partial\\gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1714895833227},{"_id":"node_modules\\hexo-theme-landscape\\layout\\_widget\\archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1714895833155},{"_id":"node_modules\\hexo-theme-landscape\\layout\\_partial\\google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1714895833233},{"_id":"node_modules\\hexo-theme-landscape\\layout\\_partial\\footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1714895833217},{"_id":"node_modules\\hexo-theme-landscape\\layout\\_widget\\recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1714895833266},{"_id":"node_modules\\hexo-theme-landscape\\layout\\_widget\\tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1714895833276},{"_id":"node_modules\\hexo-theme-landscape\\layout\\_partial\\head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1714895833236},{"_id":"node_modules\\hexo-theme-landscape\\layout\\_widget\\tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1714895833282},{"_id":"node_modules\\hexo-theme-landscape\\layout\\_widget\\category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1714895833200},{"_id":"node_modules\\hexo-theme-landscape\\layout\\_partial\\header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1714895833240},{"_id":"node_modules\\hexo-theme-landscape\\source\\css\\_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1714895833340},{"_id":"node_modules\\hexo-theme-landscape\\source\\css\\_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1714895833342},{"_id":"node_modules\\hexo-theme-landscape\\source\\fancybox\\jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1714895833015},{"_id":"node_modules\\hexo-theme-landscape\\source\\css\\style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1714895833375},{"_id":"node_modules\\hexo-theme-landscape\\layout\\_partial\\post\\date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1714895833213},{"_id":"node_modules\\hexo-theme-landscape\\layout\\_partial\\post\\category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1714895833193},{"_id":"node_modules\\hexo-theme-landscape\\layout\\_partial\\post\\gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1714895833222},{"_id":"node_modules\\hexo-theme-landscape\\source\\js\\script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1714895833328},{"_id":"node_modules\\hexo-theme-landscape\\layout\\_partial\\post\\tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1714895833273},{"_id":"node_modules\\hexo-theme-landscape\\layout\\_partial\\post\\nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1714895833254},{"_id":"node_modules\\hexo-theme-landscape\\layout\\_partial\\post\\title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1714895833285},{"_id":"node_modules\\hexo-theme-landscape\\source\\css\\_partial\\archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1714895833347},{"_id":"node_modules\\hexo-theme-landscape\\source\\css\\_util\\grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1714895833358},{"_id":"node_modules\\hexo-theme-landscape\\source\\css\\_partial\\article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1714895833349},{"_id":"node_modules\\hexo-theme-landscape\\source\\css\\_util\\mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1714895833365},{"_id":"node_modules\\hexo-theme-landscape\\source\\css\\_partial\\comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1714895833352},{"_id":"node_modules\\hexo-theme-landscape\\source\\css\\_partial\\mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1714895833367},{"_id":"node_modules\\hexo-theme-landscape\\source\\css\\_partial\\sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1714895833369},{"_id":"node_modules\\hexo-theme-landscape\\source\\css\\_partial\\header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1714895833360},{"_id":"node_modules\\hexo-theme-landscape\\source\\css\\_partial\\footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1714895833354},{"_id":"node_modules\\hexo-theme-landscape\\source\\css\\_partial\\sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1714895833373},{"_id":"node_modules\\hexo-theme-landscape\\source\\css\\_partial\\sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1714895833371},{"_id":"node_modules\\hexo-theme-landscape\\source\\css\\_partial\\highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1714895833362},{"_id":"node_modules\\hexo-theme-landscape\\source\\fancybox\\jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1714895833325},{"_id":"node_modules\\hexo-theme-landscape\\source\\js\\jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1714895833320},{"_id":"node_modules\\hexo-theme-landscape\\source\\css\\images\\banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1714895833303},{"_id":"public/2024/05/05/关于我/index.html","hash":"85efbad6e0d651dd67dedd4796d13549745f828d","modified":1740887187097},{"_id":"public/2024/05/05/hello-world/index.html","hash":"e5e6ea9c4d3f18b6e479e52d1b346637a04d740b","modified":1740910393557},{"_id":"public/archives/index.html","hash":"2b1bf0156aa4cb0f1e0477b44f9ffc0306782261","modified":1740910393557},{"_id":"public/archives/2024/index.html","hash":"e69d54d6348480497b9123cfea035a3c80972cbb","modified":1740910296792},{"_id":"public/archives/2024/05/index.html","hash":"cfdfb1b5c1b35ab3a640b5ce148507d9f3c7c1da","modified":1740888011104},{"_id":"public/index.html","hash":"57ccb1586ff7bca0a882e58be03a58c9e05871ae","modified":1740910393557},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1714903766378},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1714903766378},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1714903766378},{"_id":"public/css/style.css","hash":"4b65ba99401dce8b954f99a41762967e21eb40c7","modified":1740846200231},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1714903766378},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1714903766378},{"_id":"source/_posts/关于我.md","hash":"e3e8682ec1c4c7e9bc41903c00f671d6ed2fbcf5","modified":1714897043117},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1714882942226},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1714895833332},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1714895833334},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1714895833173},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1714895832982},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1714895833206},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1714895833377},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1714895833259},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1714895833247},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1714895833243},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1714895833263},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1714895833379},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1714895833279},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1714895833380},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1714895833386},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1714895833387},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1714895833389},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1714895833394},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1714895833399},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1714895833383},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1714895833391},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1714895833393},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1714895833403},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1714895833405},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1714895833396},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1714895833406},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1714895833400},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1714895833398},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1714895833408},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1714895833401},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1714895833407},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1714895833413},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1714895833410},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1714895833414},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1714895833416},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1714895833417},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1714895833423},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1714895833418},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1714895833419},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1714895833411},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1714895833424},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1714895833425},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1714895833427},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1714895833426},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1714895833307},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1714895833113},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1714895833217},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1714895833089},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1714895833233},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1714895833227},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1714895833182},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1714895833250},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1714895833269},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1714895833131},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1714895833236},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1714895833266},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1714895833200},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1714895833155},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1714895833240},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1714895833276},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1714895833282},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1714895833340},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1714895833342},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1714895833375},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1714895833193},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1714895833285},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1714895833328},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1714895833015},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1714895833213},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1714895833273},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1714895833222},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1714895833254},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1714895833358},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1714895833365},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1714895833352},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1714895833354},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1714895833347},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1714895833349},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1714895833367},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1714895833369},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1714895833373},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1714895833362},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1714895833360},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1714895833371},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1714895833320},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1714895833325},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1714895833303},{"_id":"source/about/index.md","hash":"e5e779fc474b1dd865145868e03926b205eabb8d","modified":1740846102634},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1740845689433},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"ff9b0e1fb9dba665af2f1e4a577f8cb9e840464b","modified":1740845689349},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"7746460fc2eba7439b494c46aa9b5ded81370819","modified":1740845689348},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"e62d2e25cae57e8469e3f48c9d17be1fd284a969","modified":1740845689436},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1740845689267},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"58dccef1d98b472dc4e6f4693c2297b0c9c5afba","modified":1740845689438},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"7c1a0c9f6186b6643b19d3980f055329bdb4efa4","modified":1740845689438},{"_id":"node_modules/hexo-theme-fluid/languages/es.yml","hash":"026ddf1a49bf8ddfef6ed86ab4d6af143c1dd95f","modified":1740845689440},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"9c580471257f5a32bee701a059a45ea96755dcdc","modified":1740845689438},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"550b95d3614a64592f02666938d235e9f11e449e","modified":1740845689440},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"a60847136709bb95586a98d9d67b50390a8d2c96","modified":1740845689442},{"_id":"node_modules/hexo-theme-fluid/languages/zh-HK.yml","hash":"51c2b4d64c6992a39bfd2586a1bdf5fbbbdf0175","modified":1740845689443},{"_id":"node_modules/hexo-theme-fluid/languages/ru.yml","hash":"93818f8bf07195fb1ebffbb5210e531b0e3a6ec4","modified":1740845689441},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"e1043de394f6dcf5c0647adcfdefe60637f78426","modified":1740845689443},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1740845689278},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"052e9fc19c753f53fdc083c7fb098e3668880140","modified":1740845689276},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1740845689282},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1740845689294},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1740845689284},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1740845689274},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1740845689295},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"9bf0d357a607a282f3b9cb04525a4df0cc2a8b76","modified":1740845689305},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1740845689304},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1740845689312},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1740845689312},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1740845689278},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"33c3317cdcee062789de2336dd8d0cc7f86d3650","modified":1740845689293},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1740845689283},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1740845689284},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/css.ejs","hash":"1dadb118d580280524ed0a5f69bd34d234a92276","modified":1740845689287},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"40c8b0852873032e7aaef3f68e8ea08706cdef13","modified":1740845689291},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1740845689286},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1740845689297},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/head.ejs","hash":"67be642f99482c07904474f410cfbc2f99003288","modified":1740845689292},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1740845689292},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1740845689304},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1740845689334},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1740845689333},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1740845689338},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1740845689325},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1740845689337},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1740845689307},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1740845689341},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"6eaf53cf4bfc756a65bda18184cf8998a12c861d","modified":1740845689319},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1740845689308},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"82bb06686158ebe160a631c79f156cd4fde35656","modified":1740845689343},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/fold.js","hash":"73e4fd12ce3e47981479391ed354b7d9d3279f70","modified":1740845689328},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1740845689330},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1740845689335},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1740845689339},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1740845689339},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1740845689332},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1740845689319},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1740845689325},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1740845689327},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1740845689341},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1740845689346},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1740845689324},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1740845689344},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1740845689335},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"966689d7c5e4320008285395fbaa2751f6209be5","modified":1740845689346},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/crypto.js","hash":"ae4ad8a188ef5b3fa6818b01629fc962b3de8551","modified":1740845689323},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1740845689344},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1740845689321},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1740845689340},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"4d48c424e47ff9a17a563167ea5f480890267adf","modified":1740845689347},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1740845689345},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1740845689317},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1740845689405},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1740845689349},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1740845689405},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1740845689272},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1740845689421},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1740845689436},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1740845689426},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1740845689318},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1740845689422},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1740845689331},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"6869811f67e4c3de3edfa4b08464bb242b97a402","modified":1740845689327},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1740845689338},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"1ef88c881b9f942deadde3d890387b94c617342a","modified":1740845689321},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1740845689336},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1740845689343},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1740845689347},{"_id":"node_modules/hexo-theme-fluid/source/js/umami-view.js","hash":"33c4b3883fa747604074ad3921606eeeaeb50716","modified":1740845689345},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1740845689285},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1740845689289},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1740845689287},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1740845689291},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1740845689296},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1740845689289},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1740845689313},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1740845689315},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1740845689315},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"3d08c73b77e412d2f06a24d9344565fc7dbc76f8","modified":1740845689316},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1740845689291},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1740845689306},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"954a29b58d72647d20450da270b5d8fb2e0824f5","modified":1740845689310},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"37d750428772d7c71ba36ce0c2540780d90fadea","modified":1740845689303},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"e6dcbf1c2f56314d56bb46b50aca86ff68cacebd","modified":1740845689276},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1740845689281},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1740845689280},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1740845689277},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1740845689285},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1740845689290},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1740845689290},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1740845689298},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1740845689293},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1740845689299},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/moment.ejs","hash":"4ff3fb1b60ccc95a0af3bbdbd0757fedefc088b5","modified":1740845689302},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1740845689303},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1740845689282},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"cbfa32c5f5973133afd043853b24f8200455cb2d","modified":1740845689286},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1740845689314},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1740845689299},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"54dd479dbb440126e4ddd9d902229db5afaaae98","modified":1740845689300},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1740845689309},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1740845689313},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1740845689310},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"c19ac8050b82c3676b0332a56099ccfcc36d9d52","modified":1740845689329},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"bd8376e1cf7892dc2daa58f2f443574be559fdbf","modified":1740845689330},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1740845689335},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1740845689339},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"a5fe1deccb73b5f578797dbb11038efc15f63ce8","modified":1740845689331},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1740845689336},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1740845689323},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1740845689411},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1740845689412},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1740845689413},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1740845689408},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1740845689413},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1740845689424},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"85492ef64d7e5f70f0f7e46d570bbc911e686d7e","modified":1740845689416},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1740845689429},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1740845689425},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1740845689415},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1740845689430},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1740845689416},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1740845689426},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1740845689415},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1740845689418},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1740845689427},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1740845689422},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"7eee3f78296a3c81849a5415d1d43dcc6e03e6aa","modified":1740845689430},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"c96d36aa8fe20f0c3c1a29ee2473cd8064b10f73","modified":1740845689430},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1740845689406},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"25fb6fa4c783b847c632584c49a7e1593cdb2f5d","modified":1740845689424},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1740845689434},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1740845689416},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1740845689408},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1740845689414},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1740845689420},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"d42b748f2f49ef32aafb1a21d75991d2459da927","modified":1740845689421},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1740845689409},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1740845689427},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1740845689419},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1740845689428},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1740845689420},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1740845689428},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1740845689431},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1740845689433},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1740845689435},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1740845689429},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1740845689433},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1740845689402},{"_id":"public/local-search.xml","hash":"28c4a7071319ac3d9576bca5751321685863d017","modified":1740910393557},{"_id":"public/about/index.html","hash":"608825c56026ecabf17a9d2fa8fc8275770d6096","modified":1740887187097},{"_id":"public/404.html","hash":"0ae4b3ce375f0e55acffece639f5f8a54684b808","modified":1740887187097},{"_id":"public/tags/index.html","hash":"bae11f2813a42ecaef566e5ec5ab5f541b286f3f","modified":1740888011104},{"_id":"public/categories/index.html","hash":"454b084bd096d814ea55ce3ec2ffda9a5fb64be5","modified":1740910393557},{"_id":"public/links/index.html","hash":"9a8ac92a59617753f525f8b10aba9475a932494c","modified":1740887187097},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1740846200231},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1740846200231},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1740846200231},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1740846200231},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1740846200231},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1740846200231},{"_id":"public/css/highlight.css","hash":"04d4ddbb5e1d1007447c2fe293ee05aae9b9563e","modified":1740846200231},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1740846200231},{"_id":"public/css/highlight-dark.css","hash":"902294bada4323c0f51502d67cba8c3a0298952f","modified":1740846200231},{"_id":"public/js/color-schema.js","hash":"1ef88c881b9f942deadde3d890387b94c617342a","modified":1740846200231},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1740846200231},{"_id":"public/css/main.css","hash":"14ebd9b515085666cee29bbcbe362ad3604ab62a","modified":1740846200231},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1740846200231},{"_id":"public/js/events.js","hash":"6869811f67e4c3de3edfa4b08464bb242b97a402","modified":1740846200231},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1740846200231},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1740846200231},{"_id":"public/js/umami-view.js","hash":"33c4b3883fa747604074ad3921606eeeaeb50716","modified":1740846200231},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1740846200231},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1740846200231},{"_id":"source/img/wechat_qrcode.jpg","hash":"d64a1476bbff4c4685de2907533816fab9b5acb1","modified":1740884463779},{"_id":"public/img/wechat_qrcode.jpg","hash":"d64a1476bbff4c4685de2907533816fab9b5acb1","modified":1740884509418},{"_id":"source/_posts/初识Builder设计模式.md","hash":"d97c57d7c16abd878f3764b78475d7f5adb199db","modified":1740887316298},{"_id":"public/2025/03/02/初识Builder设计模式/index.html","hash":"9e4f640516293d0c6669a04648d1f7efd1a59e1e","modified":1740887012261},{"_id":"public/archives/2025/index.html","hash":"bc349f2dda94a2edcd8dbe7cd0119b9509266682","modified":1740910393557},{"_id":"public/archives/2025/03/index.html","hash":"ed59645ede2060a154d47c778192d0c0ec0f2ced","modified":1740910393557},{"_id":"public/2021/09/11/初识Builder设计模式/index.html","hash":"b379b61acb74bf29410ada95cc1cf417a175f400","modified":1740887585725},{"_id":"public/archives/2021/index.html","hash":"4e90e5f12caa36e9d25e12631abfc5a9339e4ed3","modified":1740887585725},{"_id":"public/archives/2021/09/index.html","hash":"8dd77e25273fe7ba80cba57f8ed54831214a25aa","modified":1740887585725},{"_id":"public/tags/设计模式/index.html","hash":"8ad4d2d9856b94442a4ad1c32bce0ff244f3599f","modified":1740887323343},{"_id":"public/categories/架构设计/index.html","hash":"1b642ecbb947cd51d77a251f1a849312a0cbb4e3","modified":1740887323343},{"_id":"public/tags/Java/index.html","hash":"a4e9b39a39132322ba9759a5703628d14a605a18","modified":1740887585725},{"_id":"source/_posts/Java手写一个简单的HashMap.md","hash":"3153c29955509c07c98b5128e260353ac1378ba7","modified":1740887708455},{"_id":"public/2021/09/11/Java手写一个简单的HashMap/index.html","hash":"7a66fe6e7bd7c381959f34287617c995ed9b2a77","modified":1740910296792},{"_id":"public/categories/源码剖析和实现/index.html","hash":"eb671ab01fcc21fa8cc24c22a0d4352ff162127b","modified":1740887585725},{"_id":"public/tags/HashMap/index.html","hash":"ec91545a8746e961f0582c56e93989d3497c67e0","modified":1740887585725},{"_id":"public/tags/手写/index.html","hash":"0e8a193c75faf0179882a4690f68fae1ddd671c2","modified":1740887585725},{"_id":"source/img/hashmap.png","hash":"c10209ed19a924fa9e3801543ade47026b584b74","modified":1740887656753},{"_id":"public/img/hashmap.png","hash":"c10209ed19a924fa9e3801543ade47026b584b74","modified":1740887713096},{"_id":"source/_posts/容器镜像系列教程(一)Docker技术的前世今生.md","hash":"f0b786e5d97977b02fdffeffcd2b9e5bf87047d3","modified":1740910282961},{"_id":"public/archives/2024/03/index.html","hash":"c9fe50b78149996a1ad21d08dd89445b7e4446e4","modified":1740888011104},{"_id":"public/categories/系列教程/index.html","hash":"37b19263d95babfc3ee2b28df864aef6079ccc2e","modified":1740910393557},{"_id":"public/categories/系列教程/容器镜像系列教程/index.html","hash":"fc90ee890156e11b454fd19bf51ebe5d0fc74c58","modified":1740910393557},{"_id":"public/tags/容器/index.html","hash":"524e90e1f06215caf6f50ff2a18b2fe77bfeb274","modified":1740910393557},{"_id":"public/tags/Docker/index.html","hash":"9b05c9d5238163d9d7f0576aef544dba5377b2e9","modified":1740910393557},{"_id":"public/2024/03/02/容器镜像系列教程(一)Docker技术的前世今生/index.html","hash":"dc7158493c6fea7979e8fbfc71a53153690a1ad8","modified":1740888011104},{"_id":"public/tags/镜像/index.html","hash":"29b942816a97b7790f190c4f5fef712ce8a0b89b","modified":1740910393557},{"_id":"source/img/容器镜像系列教程/容器VS虚拟机.png","hash":"fac2dc5a274693512126531b5c94109c53af9a90","modified":1740908902084},{"_id":"source/img/容器镜像系列教程/docker操作流程图.png","hash":"c73a08c84c51ae22f1b9ae826bf89b63d06fe801","modified":1740909102136},{"_id":"public/2025/03/02/容器镜像系列教程(一)Docker技术的前世今生/index.html","hash":"7fb4ba46706aefe9e76b3f912bc56bb09d626109","modified":1740910296792},{"_id":"public/img/容器镜像系列教程/容器VS虚拟机.png","hash":"fac2dc5a274693512126531b5c94109c53af9a90","modified":1740910296792},{"_id":"public/img/容器镜像系列教程/docker操作流程图.png","hash":"c73a08c84c51ae22f1b9ae826bf89b63d06fe801","modified":1740910296792},{"_id":"source/_posts/容器镜像系列教程-(一)初识Docker.md","hash":"f0b786e5d97977b02fdffeffcd2b9e5bf87047d3","modified":1740910282961},{"_id":"public/2025/03/02/容器镜像系列教程-(一)初识Docker/index.html","hash":"f14ad7f607515406da01c3874dbccab1f2c32fe8","modified":1740910393557}],"Category":[{"name":"架构设计","_id":"cm7r3clyx00000ctyg33qabty"},{"name":"源码剖析和实现","_id":"cm7r3ilv3000134ty9p2mbb0b"},{"name":"系列教程","_id":"cm7r3ruoh00029sty4kah5xhr"},{"name":"容器镜像系列教程","parent":"cm7r3ruoh00029sty4kah5xhr","_id":"cm7r3ruoi00049sty62iy89kg"}],"Data":[],"Page":[{"title":"about","layout":"about","date":"2025-03-01T16:19:14.000Z","_content":"淡漠无声，毕业于武汉大学，目前在深工作。\n\n喜欢的一句话是：\n```\nDo what you love until you love to do\nRead what you love until you love to read\n```","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\ndate: 2025-03-02 00:19:14\n---\n淡漠无声，毕业于武汉大学，目前在深工作。\n\n喜欢的一句话是：\n```\nDo what you love until you love to do\nRead what you love until you love to read\n```","updated":"2025-03-01T16:21:42.634Z","path":"about/index.html","comments":1,"_id":"cm7qevp5x000034tyhjc315g7","content":"<p>淡漠无声，毕业于武汉大学，目前在深工作。</p>\n<p>喜欢的一句话是：</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs delphi\"><span class=\"hljs-keyword\">Do</span> what you love <span class=\"hljs-keyword\">until</span> you love <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">do</span><br><span class=\"hljs-keyword\">Read</span> what you love <span class=\"hljs-keyword\">until</span> you love <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">read</span><br></code></pre></td></tr></table></figure>","excerpt":"","more":"<p>淡漠无声，毕业于武汉大学，目前在深工作。</p>\n<p>喜欢的一句话是：</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs delphi\"><span class=\"hljs-keyword\">Do</span> what you love <span class=\"hljs-keyword\">until</span> you love <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">do</span><br><span class=\"hljs-keyword\">Read</span> what you love <span class=\"hljs-keyword\">until</span> you love <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">read</span><br></code></pre></td></tr></table></figure>"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-05-05T07:57:04.530Z","updated":"2024-05-05T04:22:22.226Z","_id":"clvtdfb240000twtyf82l4w9i","comments":1,"layout":"post","photos":[],"content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"初识Builder设计模式","date":"2021-09-11T03:52:50.000Z","_content":"\n### 问题\n\n现在，假设我们正在一个为银行制作软件。在开始其他事情之前，我们需要用一种方式表示一个银行账户。我们第一版设计可能是下面这个样子：\n\n    public class BankAccount {\n        private long accountNumber;\n        private String owner;\n        private double balance;\n    \n        public BankAccount(long accountNumber, String owner, double balance) {\n            this.accountNumber = accountNumber;\n            this.owner = owner;\n            this.balance = balance;\n        }\n    \n    \t//getter方法和setter方法\n    }\n\n我们可以用下面的方式来声明一个对象：\n\n```java\nBankAccount account = new BankAccount(123L, \"lj\", 100.00);\n```\n\n不幸的是，这样的设计是非常简单的。一个新的需求被送了过来，告诉你说我们需要记录每个账户每月的利率（interestRate），并且，还需要知道是在哪个分行（branch）。这听起来很容易，所以我们很容易就能提交我们第二个版本的BankAccount类：\n\n```java\npublic class BankAccount {\n\n    private long accountNumber;\n    private String owner;\n    private String branch;\n    private double balance;\n    private double interestRate;\n\n    public BankAccount(long accountNumber, String owner, String branch, double balance, double interestRate) {\n        this.accountNumber = accountNumber;\n        this.owner = owner;\n        this.branch = branch;\n        this.balance = balance;\n        this.interestRate = interestRate;\n   }\n\n    //getter方法和setter方法\n}\n```\n\n由于我们及时更新银行账户，这使得我们获得了几个新用户。\n\n```java\nBankAccount account = new BankAccount(456L, \"lj\", \"Springfield\", 100.00, 2.5);\nBankAccount anotherAccount = new BankAccount(789L, \"wtx\", null, 2.5, 100.00);  //这里的利息异常\n```\n\n对以上这段代码，我们的编译器不会检查出错误。但是，我们知道利息肯定不可能是100%（如果有这样一个银行，那绝对已经倒闭了！）但是为什么会出现这种情况呢？提示：注意构造器的变量顺序。\n\n如果我们有多个连续同类型的参数，我们很容易将他们弄混。而且编译器是不会把这个错误识别出来的，这可能会在我们运行时造成一些很难调试的问题。另外，在构造器上增加过多的参数将会使可读性变得很差。如果有一个构造器有10个不同的参数，那么你很难一眼看出这些参数分别代表着什么。更糟糕的是，有一些参数还是可选的，也就是说我们有一系列重载的构造器来面临可能存在的组合情况，否则我们就只能将`null`传递给构造器，但这不是一个好习惯。\n\n为了解决这个问题，你可能会认为这个时候我们需要调用一个无参构造器然后使用setter填充变量信息。但是这又留下了一个新的问题。如果一个程序员忘记调用特定的`setter`方法了呢？结果这会使得这个对象部分初始化并且编译器还是不会发现任何问题。\n\n因此，我们有两件事需要解决：\n\n* 避免过多的构造器参数\n* 避免错误的对象状态\n\n这就是Builder设计模式最初所解决的问题。\n\n\n\n### Builder设计模式\n\nBuilder设计模式允许我们在初始化一个对象的时候写出可读性好和容易理解的代码。\n\n建造者`builder`通常拥有`BankAccount`的所有字段。我们将会在builder中配置所有我们想要的字段，并且我们会使用builder来创建一个`account`。同时，我们将会移除`BankAccount`中的所有`public`的构造器，只留下一个`private`的构造器以便于只有builder能够创建一个`account`对象。\n\n在之前的`BankAccount`例子中，我们使用建造者模式后，这个类将会是下面这个样子:\n\n```java\npublic class BankAccount {\n\n    public static class Builder {\n\n        private long accountNumber; //这个字段很重要，所以我们会将其传给构造器\n        private String owner;\n        private String branch;\n        private double balance;\n        private double interestRate;\n\n        public Builder(long accountNumber) {\n            this.accountNumber = accountNumber;\n        }\n\n        public Builder withOwner(String owner){\n            this.owner = owner;\n\n            return this;  //通过返回一个Builder，可以创建一个流畅接口\n        }\n\n        public Builder atBranch(String branch){\n            this.branch = branch;\n\n            return this;\n        }\n\n        public Builder openingBalance(double balance){\n            this.balance = balance;\n\n            return this;\n        }\n\n        public Builder atRate(double interestRate){\n            this.interestRate = interestRate;\n\n            return this;\n        }\n\n        public BankAccount build(){\n            //在这里我们创建一个BankAccount的对象，并且这个对象将被充分的初始化\n            BankAccount account = new BankAccount();  //因为builder是BankAccount的内部类, 我们可以调用BankAccount的私有构造器。\n            account.accountNumber = this.accountNumber;\n            account.owner = this.owner;\n            account.branch = this.branch;\n            account.balance = this.balance;\n            account.interestRate = this.interestRate;\n\n            return account;\n        }\n    }\n\n    //定义一个私有构造器\n    private BankAccount() {\n        //Constructor is now private.\n    }\n\n    //getter方法和setter方法\n}\n```\n\n接下来我们用使用建造者模式的`BankAccount`创建`account`对象:\n\n```java\nBankAccount account = new BankAccount.Builder(1234L)\n            .withOwner(\"lj\")\n            .atBranch(\"Springfield\")\n            .openingBalance(100)\n            .atRate(2.5)\n            .build();\n\nBankAccount anotherAccount = new BankAccount.Builder(4567L)\n            .withOwner(\"wtx\")\n            .atBranch(\"Springfield\")\n            .openingBalance(100)\n            .atRate(2.5)\n            .build();\n```\n\n虽然上面的代码看上去更长了，但是却更清晰了，更容易理解了。对于读代码时间多于写代码时间的我们来说，这显然是一种更棒的形式。\n\n### 总结\n\n在一个简单的银行账户的例子从简单到变复杂的过程中，我们使用了建造者模式探讨了我们发现的问题。\n\n如果你发现你正处于在一个构造器上添加新的参数来解决问题而导致代码变得很难读的情况，那么对你来说这可能是你自己亲手实践，使用建造者模式重构你的代码的大好时机。\n\n在笔者阅读这篇文章的时候，正在阅读一个使用Builder设计模式的项目代码，不得不说，使用Builder设计模式的代码虽然看上去长，有点使人畏惧，但是当你开始看上几眼之后，你会发现对你来说，读懂那文字，你就知道这个方法是干什么的了，这个类的构造也是十分清晰，基本是一目了然。经常也看到这样的言论：**伟大的代码是连初学者也能看懂的代码**。接触到builder设计模式以后，深以为然。\n\n\n本文取自Dzone:[Design Patterns: The Builder Pattern](https://dzone.com/articles/design-patterns-the-builder-pattern)","source":"_posts/初识Builder设计模式.md","raw":"---\ntitle: 初识Builder设计模式\ndate: 2021-09-11 11:52:50\ntags:\n  - 设计模式\n  - Java\ncategories:\n  - 架构设计\n---\n\n### 问题\n\n现在，假设我们正在一个为银行制作软件。在开始其他事情之前，我们需要用一种方式表示一个银行账户。我们第一版设计可能是下面这个样子：\n\n    public class BankAccount {\n        private long accountNumber;\n        private String owner;\n        private double balance;\n    \n        public BankAccount(long accountNumber, String owner, double balance) {\n            this.accountNumber = accountNumber;\n            this.owner = owner;\n            this.balance = balance;\n        }\n    \n    \t//getter方法和setter方法\n    }\n\n我们可以用下面的方式来声明一个对象：\n\n```java\nBankAccount account = new BankAccount(123L, \"lj\", 100.00);\n```\n\n不幸的是，这样的设计是非常简单的。一个新的需求被送了过来，告诉你说我们需要记录每个账户每月的利率（interestRate），并且，还需要知道是在哪个分行（branch）。这听起来很容易，所以我们很容易就能提交我们第二个版本的BankAccount类：\n\n```java\npublic class BankAccount {\n\n    private long accountNumber;\n    private String owner;\n    private String branch;\n    private double balance;\n    private double interestRate;\n\n    public BankAccount(long accountNumber, String owner, String branch, double balance, double interestRate) {\n        this.accountNumber = accountNumber;\n        this.owner = owner;\n        this.branch = branch;\n        this.balance = balance;\n        this.interestRate = interestRate;\n   }\n\n    //getter方法和setter方法\n}\n```\n\n由于我们及时更新银行账户，这使得我们获得了几个新用户。\n\n```java\nBankAccount account = new BankAccount(456L, \"lj\", \"Springfield\", 100.00, 2.5);\nBankAccount anotherAccount = new BankAccount(789L, \"wtx\", null, 2.5, 100.00);  //这里的利息异常\n```\n\n对以上这段代码，我们的编译器不会检查出错误。但是，我们知道利息肯定不可能是100%（如果有这样一个银行，那绝对已经倒闭了！）但是为什么会出现这种情况呢？提示：注意构造器的变量顺序。\n\n如果我们有多个连续同类型的参数，我们很容易将他们弄混。而且编译器是不会把这个错误识别出来的，这可能会在我们运行时造成一些很难调试的问题。另外，在构造器上增加过多的参数将会使可读性变得很差。如果有一个构造器有10个不同的参数，那么你很难一眼看出这些参数分别代表着什么。更糟糕的是，有一些参数还是可选的，也就是说我们有一系列重载的构造器来面临可能存在的组合情况，否则我们就只能将`null`传递给构造器，但这不是一个好习惯。\n\n为了解决这个问题，你可能会认为这个时候我们需要调用一个无参构造器然后使用setter填充变量信息。但是这又留下了一个新的问题。如果一个程序员忘记调用特定的`setter`方法了呢？结果这会使得这个对象部分初始化并且编译器还是不会发现任何问题。\n\n因此，我们有两件事需要解决：\n\n* 避免过多的构造器参数\n* 避免错误的对象状态\n\n这就是Builder设计模式最初所解决的问题。\n\n\n\n### Builder设计模式\n\nBuilder设计模式允许我们在初始化一个对象的时候写出可读性好和容易理解的代码。\n\n建造者`builder`通常拥有`BankAccount`的所有字段。我们将会在builder中配置所有我们想要的字段，并且我们会使用builder来创建一个`account`。同时，我们将会移除`BankAccount`中的所有`public`的构造器，只留下一个`private`的构造器以便于只有builder能够创建一个`account`对象。\n\n在之前的`BankAccount`例子中，我们使用建造者模式后，这个类将会是下面这个样子:\n\n```java\npublic class BankAccount {\n\n    public static class Builder {\n\n        private long accountNumber; //这个字段很重要，所以我们会将其传给构造器\n        private String owner;\n        private String branch;\n        private double balance;\n        private double interestRate;\n\n        public Builder(long accountNumber) {\n            this.accountNumber = accountNumber;\n        }\n\n        public Builder withOwner(String owner){\n            this.owner = owner;\n\n            return this;  //通过返回一个Builder，可以创建一个流畅接口\n        }\n\n        public Builder atBranch(String branch){\n            this.branch = branch;\n\n            return this;\n        }\n\n        public Builder openingBalance(double balance){\n            this.balance = balance;\n\n            return this;\n        }\n\n        public Builder atRate(double interestRate){\n            this.interestRate = interestRate;\n\n            return this;\n        }\n\n        public BankAccount build(){\n            //在这里我们创建一个BankAccount的对象，并且这个对象将被充分的初始化\n            BankAccount account = new BankAccount();  //因为builder是BankAccount的内部类, 我们可以调用BankAccount的私有构造器。\n            account.accountNumber = this.accountNumber;\n            account.owner = this.owner;\n            account.branch = this.branch;\n            account.balance = this.balance;\n            account.interestRate = this.interestRate;\n\n            return account;\n        }\n    }\n\n    //定义一个私有构造器\n    private BankAccount() {\n        //Constructor is now private.\n    }\n\n    //getter方法和setter方法\n}\n```\n\n接下来我们用使用建造者模式的`BankAccount`创建`account`对象:\n\n```java\nBankAccount account = new BankAccount.Builder(1234L)\n            .withOwner(\"lj\")\n            .atBranch(\"Springfield\")\n            .openingBalance(100)\n            .atRate(2.5)\n            .build();\n\nBankAccount anotherAccount = new BankAccount.Builder(4567L)\n            .withOwner(\"wtx\")\n            .atBranch(\"Springfield\")\n            .openingBalance(100)\n            .atRate(2.5)\n            .build();\n```\n\n虽然上面的代码看上去更长了，但是却更清晰了，更容易理解了。对于读代码时间多于写代码时间的我们来说，这显然是一种更棒的形式。\n\n### 总结\n\n在一个简单的银行账户的例子从简单到变复杂的过程中，我们使用了建造者模式探讨了我们发现的问题。\n\n如果你发现你正处于在一个构造器上添加新的参数来解决问题而导致代码变得很难读的情况，那么对你来说这可能是你自己亲手实践，使用建造者模式重构你的代码的大好时机。\n\n在笔者阅读这篇文章的时候，正在阅读一个使用Builder设计模式的项目代码，不得不说，使用Builder设计模式的代码虽然看上去长，有点使人畏惧，但是当你开始看上几眼之后，你会发现对你来说，读懂那文字，你就知道这个方法是干什么的了，这个类的构造也是十分清晰，基本是一目了然。经常也看到这样的言论：**伟大的代码是连初学者也能看懂的代码**。接触到builder设计模式以后，深以为然。\n\n\n本文取自Dzone:[Design Patterns: The Builder Pattern](https://dzone.com/articles/design-patterns-the-builder-pattern)","slug":"初识Builder设计模式","published":1,"updated":"2025-03-02T03:48:36.298Z","_id":"cm7r36g0d0000cctyaknfgbb9","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>现在，假设我们正在一个为银行制作软件。在开始其他事情之前，我们需要用一种方式表示一个银行账户。我们第一版设计可能是下面这个样子：</p>\n<pre><code class=\"hljs\">public class BankAccount &#123;\n    private long accountNumber;\n    private String owner;\n    private double balance;\n\n    public BankAccount(long accountNumber, String owner, double balance) &#123;\n        this.accountNumber = accountNumber;\n        this.owner = owner;\n        this.balance = balance;\n    &#125;\n\n    //getter方法和setter方法\n&#125;\n</code></pre>\n<p>我们可以用下面的方式来声明一个对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">BankAccount</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BankAccount</span>(<span class=\"hljs-number\">123L</span>, <span class=\"hljs-string\">&quot;lj&quot;</span>, <span class=\"hljs-number\">100.00</span>);<br></code></pre></td></tr></table></figure>\n\n<p>不幸的是，这样的设计是非常简单的。一个新的需求被送了过来，告诉你说我们需要记录每个账户每月的利率（interestRate），并且，还需要知道是在哪个分行（branch）。这听起来很容易，所以我们很容易就能提交我们第二个版本的BankAccount类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BankAccount</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">long</span> accountNumber;<br>    <span class=\"hljs-keyword\">private</span> String owner;<br>    <span class=\"hljs-keyword\">private</span> String branch;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">double</span> balance;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">double</span> interestRate;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">BankAccount</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> accountNumber, String owner, String branch, <span class=\"hljs-type\">double</span> balance, <span class=\"hljs-type\">double</span> interestRate)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.accountNumber = accountNumber;<br>        <span class=\"hljs-built_in\">this</span>.owner = owner;<br>        <span class=\"hljs-built_in\">this</span>.branch = branch;<br>        <span class=\"hljs-built_in\">this</span>.balance = balance;<br>        <span class=\"hljs-built_in\">this</span>.interestRate = interestRate;<br>   &#125;<br><br>    <span class=\"hljs-comment\">//getter方法和setter方法</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>由于我们及时更新银行账户，这使得我们获得了几个新用户。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">BankAccount</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BankAccount</span>(<span class=\"hljs-number\">456L</span>, <span class=\"hljs-string\">&quot;lj&quot;</span>, <span class=\"hljs-string\">&quot;Springfield&quot;</span>, <span class=\"hljs-number\">100.00</span>, <span class=\"hljs-number\">2.5</span>);<br><span class=\"hljs-type\">BankAccount</span> <span class=\"hljs-variable\">anotherAccount</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BankAccount</span>(<span class=\"hljs-number\">789L</span>, <span class=\"hljs-string\">&quot;wtx&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2.5</span>, <span class=\"hljs-number\">100.00</span>);  <span class=\"hljs-comment\">//这里的利息异常</span><br></code></pre></td></tr></table></figure>\n\n<p>对以上这段代码，我们的编译器不会检查出错误。但是，我们知道利息肯定不可能是100%（如果有这样一个银行，那绝对已经倒闭了！）但是为什么会出现这种情况呢？提示：注意构造器的变量顺序。</p>\n<p>如果我们有多个连续同类型的参数，我们很容易将他们弄混。而且编译器是不会把这个错误识别出来的，这可能会在我们运行时造成一些很难调试的问题。另外，在构造器上增加过多的参数将会使可读性变得很差。如果有一个构造器有10个不同的参数，那么你很难一眼看出这些参数分别代表着什么。更糟糕的是，有一些参数还是可选的，也就是说我们有一系列重载的构造器来面临可能存在的组合情况，否则我们就只能将<code>null</code>传递给构造器，但这不是一个好习惯。</p>\n<p>为了解决这个问题，你可能会认为这个时候我们需要调用一个无参构造器然后使用setter填充变量信息。但是这又留下了一个新的问题。如果一个程序员忘记调用特定的<code>setter</code>方法了呢？结果这会使得这个对象部分初始化并且编译器还是不会发现任何问题。</p>\n<p>因此，我们有两件事需要解决：</p>\n<ul>\n<li>避免过多的构造器参数</li>\n<li>避免错误的对象状态</li>\n</ul>\n<p>这就是Builder设计模式最初所解决的问题。</p>\n<h3 id=\"Builder设计模式\"><a href=\"#Builder设计模式\" class=\"headerlink\" title=\"Builder设计模式\"></a>Builder设计模式</h3><p>Builder设计模式允许我们在初始化一个对象的时候写出可读性好和容易理解的代码。</p>\n<p>建造者<code>builder</code>通常拥有<code>BankAccount</code>的所有字段。我们将会在builder中配置所有我们想要的字段，并且我们会使用builder来创建一个<code>account</code>。同时，我们将会移除<code>BankAccount</code>中的所有<code>public</code>的构造器，只留下一个<code>private</code>的构造器以便于只有builder能够创建一个<code>account</code>对象。</p>\n<p>在之前的<code>BankAccount</code>例子中，我们使用建造者模式后，这个类将会是下面这个样子:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BankAccount</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Builder</span> &#123;<br><br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">long</span> accountNumber; <span class=\"hljs-comment\">//这个字段很重要，所以我们会将其传给构造器</span><br>        <span class=\"hljs-keyword\">private</span> String owner;<br>        <span class=\"hljs-keyword\">private</span> String branch;<br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">double</span> balance;<br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">double</span> interestRate;<br><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Builder</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> accountNumber)</span> &#123;<br>            <span class=\"hljs-built_in\">this</span>.accountNumber = accountNumber;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">public</span> Builder <span class=\"hljs-title function_\">withOwner</span><span class=\"hljs-params\">(String owner)</span>&#123;<br>            <span class=\"hljs-built_in\">this</span>.owner = owner;<br><br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>;  <span class=\"hljs-comment\">//通过返回一个Builder，可以创建一个流畅接口</span><br>        &#125;<br><br>        <span class=\"hljs-keyword\">public</span> Builder <span class=\"hljs-title function_\">atBranch</span><span class=\"hljs-params\">(String branch)</span>&#123;<br>            <span class=\"hljs-built_in\">this</span>.branch = branch;<br><br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">public</span> Builder <span class=\"hljs-title function_\">openingBalance</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> balance)</span>&#123;<br>            <span class=\"hljs-built_in\">this</span>.balance = balance;<br><br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">public</span> Builder <span class=\"hljs-title function_\">atRate</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> interestRate)</span>&#123;<br>            <span class=\"hljs-built_in\">this</span>.interestRate = interestRate;<br><br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">public</span> BankAccount <span class=\"hljs-title function_\">build</span><span class=\"hljs-params\">()</span>&#123;<br>            <span class=\"hljs-comment\">//在这里我们创建一个BankAccount的对象，并且这个对象将被充分的初始化</span><br>            <span class=\"hljs-type\">BankAccount</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BankAccount</span>();  <span class=\"hljs-comment\">//因为builder是BankAccount的内部类, 我们可以调用BankAccount的私有构造器。</span><br>            account.accountNumber = <span class=\"hljs-built_in\">this</span>.accountNumber;<br>            account.owner = <span class=\"hljs-built_in\">this</span>.owner;<br>            account.branch = <span class=\"hljs-built_in\">this</span>.branch;<br>            account.balance = <span class=\"hljs-built_in\">this</span>.balance;<br>            account.interestRate = <span class=\"hljs-built_in\">this</span>.interestRate;<br><br>            <span class=\"hljs-keyword\">return</span> account;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//定义一个私有构造器</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">BankAccount</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">//Constructor is now private.</span><br>    &#125;<br><br>    <span class=\"hljs-comment\">//getter方法和setter方法</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接下来我们用使用建造者模式的<code>BankAccount</code>创建<code>account</code>对象:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">BankAccount</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BankAccount</span>.Builder(<span class=\"hljs-number\">1234L</span>)<br>            .withOwner(<span class=\"hljs-string\">&quot;lj&quot;</span>)<br>            .atBranch(<span class=\"hljs-string\">&quot;Springfield&quot;</span>)<br>            .openingBalance(<span class=\"hljs-number\">100</span>)<br>            .atRate(<span class=\"hljs-number\">2.5</span>)<br>            .build();<br><br><span class=\"hljs-type\">BankAccount</span> <span class=\"hljs-variable\">anotherAccount</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BankAccount</span>.Builder(<span class=\"hljs-number\">4567L</span>)<br>            .withOwner(<span class=\"hljs-string\">&quot;wtx&quot;</span>)<br>            .atBranch(<span class=\"hljs-string\">&quot;Springfield&quot;</span>)<br>            .openingBalance(<span class=\"hljs-number\">100</span>)<br>            .atRate(<span class=\"hljs-number\">2.5</span>)<br>            .build();<br></code></pre></td></tr></table></figure>\n\n<p>虽然上面的代码看上去更长了，但是却更清晰了，更容易理解了。对于读代码时间多于写代码时间的我们来说，这显然是一种更棒的形式。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>在一个简单的银行账户的例子从简单到变复杂的过程中，我们使用了建造者模式探讨了我们发现的问题。</p>\n<p>如果你发现你正处于在一个构造器上添加新的参数来解决问题而导致代码变得很难读的情况，那么对你来说这可能是你自己亲手实践，使用建造者模式重构你的代码的大好时机。</p>\n<p>在笔者阅读这篇文章的时候，正在阅读一个使用Builder设计模式的项目代码，不得不说，使用Builder设计模式的代码虽然看上去长，有点使人畏惧，但是当你开始看上几眼之后，你会发现对你来说，读懂那文字，你就知道这个方法是干什么的了，这个类的构造也是十分清晰，基本是一目了然。经常也看到这样的言论：<strong>伟大的代码是连初学者也能看懂的代码</strong>。接触到builder设计模式以后，深以为然。</p>\n<p>本文取自Dzone:<a href=\"https://dzone.com/articles/design-patterns-the-builder-pattern\">Design Patterns: The Builder Pattern</a></p>\n","excerpt":"","more":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>现在，假设我们正在一个为银行制作软件。在开始其他事情之前，我们需要用一种方式表示一个银行账户。我们第一版设计可能是下面这个样子：</p>\n<pre><code>public class BankAccount &#123;\n    private long accountNumber;\n    private String owner;\n    private double balance;\n\n    public BankAccount(long accountNumber, String owner, double balance) &#123;\n        this.accountNumber = accountNumber;\n        this.owner = owner;\n        this.balance = balance;\n    &#125;\n\n    //getter方法和setter方法\n&#125;\n</code></pre>\n<p>我们可以用下面的方式来声明一个对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">BankAccount</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BankAccount</span>(<span class=\"hljs-number\">123L</span>, <span class=\"hljs-string\">&quot;lj&quot;</span>, <span class=\"hljs-number\">100.00</span>);<br></code></pre></td></tr></table></figure>\n\n<p>不幸的是，这样的设计是非常简单的。一个新的需求被送了过来，告诉你说我们需要记录每个账户每月的利率（interestRate），并且，还需要知道是在哪个分行（branch）。这听起来很容易，所以我们很容易就能提交我们第二个版本的BankAccount类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BankAccount</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">long</span> accountNumber;<br>    <span class=\"hljs-keyword\">private</span> String owner;<br>    <span class=\"hljs-keyword\">private</span> String branch;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">double</span> balance;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">double</span> interestRate;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">BankAccount</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> accountNumber, String owner, String branch, <span class=\"hljs-type\">double</span> balance, <span class=\"hljs-type\">double</span> interestRate)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.accountNumber = accountNumber;<br>        <span class=\"hljs-built_in\">this</span>.owner = owner;<br>        <span class=\"hljs-built_in\">this</span>.branch = branch;<br>        <span class=\"hljs-built_in\">this</span>.balance = balance;<br>        <span class=\"hljs-built_in\">this</span>.interestRate = interestRate;<br>   &#125;<br><br>    <span class=\"hljs-comment\">//getter方法和setter方法</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>由于我们及时更新银行账户，这使得我们获得了几个新用户。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">BankAccount</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BankAccount</span>(<span class=\"hljs-number\">456L</span>, <span class=\"hljs-string\">&quot;lj&quot;</span>, <span class=\"hljs-string\">&quot;Springfield&quot;</span>, <span class=\"hljs-number\">100.00</span>, <span class=\"hljs-number\">2.5</span>);<br><span class=\"hljs-type\">BankAccount</span> <span class=\"hljs-variable\">anotherAccount</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BankAccount</span>(<span class=\"hljs-number\">789L</span>, <span class=\"hljs-string\">&quot;wtx&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2.5</span>, <span class=\"hljs-number\">100.00</span>);  <span class=\"hljs-comment\">//这里的利息异常</span><br></code></pre></td></tr></table></figure>\n\n<p>对以上这段代码，我们的编译器不会检查出错误。但是，我们知道利息肯定不可能是100%（如果有这样一个银行，那绝对已经倒闭了！）但是为什么会出现这种情况呢？提示：注意构造器的变量顺序。</p>\n<p>如果我们有多个连续同类型的参数，我们很容易将他们弄混。而且编译器是不会把这个错误识别出来的，这可能会在我们运行时造成一些很难调试的问题。另外，在构造器上增加过多的参数将会使可读性变得很差。如果有一个构造器有10个不同的参数，那么你很难一眼看出这些参数分别代表着什么。更糟糕的是，有一些参数还是可选的，也就是说我们有一系列重载的构造器来面临可能存在的组合情况，否则我们就只能将<code>null</code>传递给构造器，但这不是一个好习惯。</p>\n<p>为了解决这个问题，你可能会认为这个时候我们需要调用一个无参构造器然后使用setter填充变量信息。但是这又留下了一个新的问题。如果一个程序员忘记调用特定的<code>setter</code>方法了呢？结果这会使得这个对象部分初始化并且编译器还是不会发现任何问题。</p>\n<p>因此，我们有两件事需要解决：</p>\n<ul>\n<li>避免过多的构造器参数</li>\n<li>避免错误的对象状态</li>\n</ul>\n<p>这就是Builder设计模式最初所解决的问题。</p>\n<h3 id=\"Builder设计模式\"><a href=\"#Builder设计模式\" class=\"headerlink\" title=\"Builder设计模式\"></a>Builder设计模式</h3><p>Builder设计模式允许我们在初始化一个对象的时候写出可读性好和容易理解的代码。</p>\n<p>建造者<code>builder</code>通常拥有<code>BankAccount</code>的所有字段。我们将会在builder中配置所有我们想要的字段，并且我们会使用builder来创建一个<code>account</code>。同时，我们将会移除<code>BankAccount</code>中的所有<code>public</code>的构造器，只留下一个<code>private</code>的构造器以便于只有builder能够创建一个<code>account</code>对象。</p>\n<p>在之前的<code>BankAccount</code>例子中，我们使用建造者模式后，这个类将会是下面这个样子:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BankAccount</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Builder</span> &#123;<br><br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">long</span> accountNumber; <span class=\"hljs-comment\">//这个字段很重要，所以我们会将其传给构造器</span><br>        <span class=\"hljs-keyword\">private</span> String owner;<br>        <span class=\"hljs-keyword\">private</span> String branch;<br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">double</span> balance;<br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">double</span> interestRate;<br><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Builder</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> accountNumber)</span> &#123;<br>            <span class=\"hljs-built_in\">this</span>.accountNumber = accountNumber;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">public</span> Builder <span class=\"hljs-title function_\">withOwner</span><span class=\"hljs-params\">(String owner)</span>&#123;<br>            <span class=\"hljs-built_in\">this</span>.owner = owner;<br><br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>;  <span class=\"hljs-comment\">//通过返回一个Builder，可以创建一个流畅接口</span><br>        &#125;<br><br>        <span class=\"hljs-keyword\">public</span> Builder <span class=\"hljs-title function_\">atBranch</span><span class=\"hljs-params\">(String branch)</span>&#123;<br>            <span class=\"hljs-built_in\">this</span>.branch = branch;<br><br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">public</span> Builder <span class=\"hljs-title function_\">openingBalance</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> balance)</span>&#123;<br>            <span class=\"hljs-built_in\">this</span>.balance = balance;<br><br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">public</span> Builder <span class=\"hljs-title function_\">atRate</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> interestRate)</span>&#123;<br>            <span class=\"hljs-built_in\">this</span>.interestRate = interestRate;<br><br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">public</span> BankAccount <span class=\"hljs-title function_\">build</span><span class=\"hljs-params\">()</span>&#123;<br>            <span class=\"hljs-comment\">//在这里我们创建一个BankAccount的对象，并且这个对象将被充分的初始化</span><br>            <span class=\"hljs-type\">BankAccount</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BankAccount</span>();  <span class=\"hljs-comment\">//因为builder是BankAccount的内部类, 我们可以调用BankAccount的私有构造器。</span><br>            account.accountNumber = <span class=\"hljs-built_in\">this</span>.accountNumber;<br>            account.owner = <span class=\"hljs-built_in\">this</span>.owner;<br>            account.branch = <span class=\"hljs-built_in\">this</span>.branch;<br>            account.balance = <span class=\"hljs-built_in\">this</span>.balance;<br>            account.interestRate = <span class=\"hljs-built_in\">this</span>.interestRate;<br><br>            <span class=\"hljs-keyword\">return</span> account;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//定义一个私有构造器</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">BankAccount</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">//Constructor is now private.</span><br>    &#125;<br><br>    <span class=\"hljs-comment\">//getter方法和setter方法</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接下来我们用使用建造者模式的<code>BankAccount</code>创建<code>account</code>对象:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">BankAccount</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BankAccount</span>.Builder(<span class=\"hljs-number\">1234L</span>)<br>            .withOwner(<span class=\"hljs-string\">&quot;lj&quot;</span>)<br>            .atBranch(<span class=\"hljs-string\">&quot;Springfield&quot;</span>)<br>            .openingBalance(<span class=\"hljs-number\">100</span>)<br>            .atRate(<span class=\"hljs-number\">2.5</span>)<br>            .build();<br><br><span class=\"hljs-type\">BankAccount</span> <span class=\"hljs-variable\">anotherAccount</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BankAccount</span>.Builder(<span class=\"hljs-number\">4567L</span>)<br>            .withOwner(<span class=\"hljs-string\">&quot;wtx&quot;</span>)<br>            .atBranch(<span class=\"hljs-string\">&quot;Springfield&quot;</span>)<br>            .openingBalance(<span class=\"hljs-number\">100</span>)<br>            .atRate(<span class=\"hljs-number\">2.5</span>)<br>            .build();<br></code></pre></td></tr></table></figure>\n\n<p>虽然上面的代码看上去更长了，但是却更清晰了，更容易理解了。对于读代码时间多于写代码时间的我们来说，这显然是一种更棒的形式。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>在一个简单的银行账户的例子从简单到变复杂的过程中，我们使用了建造者模式探讨了我们发现的问题。</p>\n<p>如果你发现你正处于在一个构造器上添加新的参数来解决问题而导致代码变得很难读的情况，那么对你来说这可能是你自己亲手实践，使用建造者模式重构你的代码的大好时机。</p>\n<p>在笔者阅读这篇文章的时候，正在阅读一个使用Builder设计模式的项目代码，不得不说，使用Builder设计模式的代码虽然看上去长，有点使人畏惧，但是当你开始看上几眼之后，你会发现对你来说，读懂那文字，你就知道这个方法是干什么的了，这个类的构造也是十分清晰，基本是一目了然。经常也看到这样的言论：<strong>伟大的代码是连初学者也能看懂的代码</strong>。接触到builder设计模式以后，深以为然。</p>\n<p>本文取自Dzone:<a href=\"https://dzone.com/articles/design-patterns-the-builder-pattern\">Design Patterns: The Builder Pattern</a></p>\n"},{"title":"Java手写一个简单的HashMap","date":"2021-09-11T03:56:50.000Z","_content":"\n\n\n#### 1.背景介绍\n\nHashMap在Java中是常用的数据结构之一。HashMap 是一个散列表，它存储的内容是键值对(key-value)映射，并具有很快的访问速度。在JDK1.7中，HashMap是基于“数组+链表”实现的，而在JDK1.8以后，HashMap在底层实现中加入了红黑树用于提升查找速率。\n\n![](/img/hashmap.png)\n\t<center><font face=\"宋体\" size=3 color=\"black\">图源网络，侵删</font></center>\n<br>\n\n在JDK1.8中，当链表的长度大于阈值8时，这时这个链表将会转化成红黑树以提升查找效率。为什么阈值是8呢？请读者不妨思考一下这个问题，在文章末尾笔者将给出原因。（提示：想一想在红黑树和链表中查找一个元素的复杂度）\n\n好了，关于HashMap就简单介绍到这里，接下来我们关注于自己实现一个HashMap—MyHashMap。\n\n\n\n#### 2.目标\n\n在本次实现中，我们的目标如下：\n\n* 实现put(k, v)，该方法返回V类型的元素，这里返回为空即可。\n* 实现get(k)，该方法返回这个建对应的值v。\n* 实现remove(k)，该方法将这个键对应的键值对删除，并返回对应的值v，如果不存在对应的键，返回空。\n* 实现size()，该方法返回HashMap中的键值对数目。\n\n明确我们的目标后，就可以关注于具体实现了。\n\n\n\n#### 3.手写HashMap\n\n##### 3.1定义MyMap接口\n\n这个接口定义了我们需要实现的具体行为。\n\n```java\npublic interface MyMap <K, V>{\n    V get(K k);\n\n    V put(K k, V v);\n\n    int size();\n\n    V remove(K k);\n\n    boolean isEmpty();\n}\n```\n\n接下来我们要根据这个接口的定义完成我们的MyHashMap类去实现接口中定义的行为。\n\n\n\n##### 3.2定义链表节点\n\n因为HashMap中存在着链表，所以我们也需要实现一个链表。我们以内部类的形式定义这样一个节点Entry，Entry类保存了\"K-V\"数据，next字段表明它可能会是一个链表节点。\n\n参考形式如下：\n\n```java\npublic class MyHashMap <K,V> implements MyMap<K, V> {\n    //定义内部类Entry作为链表节点\n     class Entry<K, V>{\n         K k;\n         V v;\n         Entry<K,V> next;\n\n         public Entry(K k, V v){\n             this.k = k;\n             this.v = v;\n         }\n     }\n}\n\n```\n\n\n\n##### 3.2定义成员变量\n\n这里参照HashMap设置一个默认的容量capacity和默认的加载因子loadFactor，table就是底层数组，另外，考虑到size方法的实现，这里肯定还需要一个成员变量size用于表示HashMap的大小。\n\n```java\n//定义成员变量\nfinal static int DEFAULT_CAPACITY = 16;\nfinal static float DEFAULT_LOAD_FACTOR = 0.75f;\n\nprivate int capacity;\nprivate float loadFactor;\nprivate int size = 0;\n\nEntry<K,V>[] table;\n```\n\n\n\n##### 3.3实现构造方法\n\n```java\npublic MyHashMap(){\n   this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);\n}\n\npublic MyHashMap(int capacity, float loadFactor){\n   this.capacity = upperMinPowerOf2(capacity);     //获取为2的幂次方的容量大小\n    this.loadFactor = loadFactor;                  //加载因子，用于扩容,本次实现中尚未用到该字段\n    this.table = new Entry[capacity];\n}\n```\n\n这里的`upperMinPowerOf2`的作用是获取大于capacity的最小的2次幂。在HashMap中，开发者采用了更精妙的位运算的方式完成了这个功能，效率比这种方式要更高。capacity要求为2次幂是为了方便HashMap在数组扩容时能够更好地对已存在的元素进行重新哈希。\n\n```java\nprivate static int upperMinPowerOf2(int n){\n    int power = 1;\n    while(power <= n){\n        power *= 2;\n    }\n    return power;\n}\n```\n\n\n\n##### 3.4实现put方法\n\nput方法将传入的键值对封装成一个Entry<K, V>对象进行存入，存入数组中的index我们通过对键哈希取模得到，这样能减少哈希冲突，也就能减少链表的数目，能提高HashMap的查找效率。\n\n假如数组中没有元素，那么直接将该Entry放入对应位置即可。\n\n假如数组中已经存在元素，我们需要遍历这个链表，检查是否存在有相等的key（这里用equals方法会更好），如果存在相等key，那么用新值替换旧值，然后返回；如果不存在，那么就使用头插法插入链表。\n\n记得对size做正确的操作，保持记录的元素个数正确。\n\n```java\n@Override\npublic V put(K k, V v) {\n    // 通过hashcode散列获取索引\n    int index = k.hashCode() % table.length;\n    Entry<K,V> current = table[index];\n    //判断是否已经存在元素\n    if (current!=null){\n        // 遍历链表是否有相等key, 有则替换且返回旧值\n        while (current!=null){\n            if(current.k == k){\n                V oldValue = current.v;\n                current.v = v;\n                return oldValue;\n            }\n            current = current.next;\n        }\n        // 没有则使用头插法\n        table[index] = new Entry<K, V>(k,v, table[index]);\n        size++;\n        return null;\n    }\n    //不存在元素直接放入即可\n    table[index] = new Entry<K, V>(k,v,null);\n    size++;\n    return null;\n}\n```\n\n\n\n##### 3.5实现get方法\n\nget方法通过键k获取对应的值v，根据put中存放的索引位置，get方法中也是一样的计算方法。\n\n遍历链表，如果检查存在键为k的键值对Entry，那么就返回对应的值v，没有则返回空。\n\n```java\n@Override\npublic V get(K k) {\n     int index = k.hashCode() % table.length;\n     Entry<K, V> current = table[index];\n     //遍历链表\n    while (current!=null){\n        if(current.k == k)\n            return current.v;\n        current = current.next;\n    }\n    //不存在则返回空\n    return null;\n}\n```\n\n\n\n##### 3.6实现remove方法\n\nremove方法通过对应的键k删去在HashMap中对应的键值对Entry，同样是遍历链表，不同的是我们需要一个前置节点pre保存当前节点的上一个节点信息，这样才能正确地删除节点。删除成功则将size-1。\n\n如果不存在这样一个节点，返回空。\n\n```java\n@Override\npublic V remove(K k) {\n    int index = k.hashCode() % table.length;\n    V result = null;\n    Entry<K, V> current = table[index];\n    //遍历链表\n    Entry<K, V> pre = null;\n\n    while(current!=null){\n        if(current.k == k){\n            result = current.v;\n            size--;\n            if (pre!=null){\n                pre.next = current.next;\n            }else {\n                table[index] = current.next;\n            }\n\n            return result;\n        }\n        //向下遍历\n        pre = current;\n        current = current.next;\n    }\n\n    return null;\n}\n```\n\n\n\n##### 3.7实现size方法与isEmpty方法\n\n比较简单的实现。\n\n```java\n@Override\npublic int size() {\n    return size;\n}\n\n@Override\npublic boolean isEmpty() {\n\treturn size==0;\n}\n```\n\n\n\n#### 4.测试MyHashMap\n\n测试代码如下：\n\n```java\npublic class hashMap_test {\n    public static void main(String[] args){\n        MyHashMap<Integer, Integer> hashMap = new MyHashMap<>();\n        hashMap.put(1,101);\n        hashMap.put(2,202);\n        hashMap.put(3,303);\n        hashMap.put(1,111);\n\n        int[] keys = new int[]{1,2,3};\n        System.out.println(\"hashMap size:\"+hashMap.size());\n        for(int i=0;i< keys.length;i++){\n            System.out.println(keys[i]+\": \"+hashMap.get(keys[i]));\n        }\n\n        hashMap.remove(1);\n        hashMap.remove(3);\n        System.out.println(\"hashMap size:\"+hashMap.size());\n        System.out.println(1+\": \"+hashMap.get(1));\n        System.out.println(3+\": \"+hashMap.get(3));\n        System.out.println(2+\": \"+hashMap.get(2));  //当然这里其实应该报错的\n    }\n}\n```\n\n\n\n#### 5.总结\n\n本文简单地实现了一个HashMap，实现了Java中HashMap的put、get、remove、size、isEmpty等方法。但其实还有一些工作可以做，比如对HashMap进行扩容，当HashMap中元素过多的时候，我们需要将HashMap扩容以提高其查找速率，其实也就是减少HashMap中链表的数目，还有就是对于空值null的支持，其实HashMap是允许key为null的，当然，这一点不算太难。\n\n对于我自己来说，原本我以为实现HashMap会是一件很困难的事情，所以我迟迟没有自己动手写一个，但是写了以后发现也就是这样，所以我们大家一定要多动手实践，也不要害怕困难，很多时候，其实是我们自己吓住了自己，导致没有去完成本可以完成的事情。\n\n\n\n关于文章开头的那个问题：**为什么当链表中的元素超过8个的时候需要将链表转换成红黑树？**\n\n答案如下：\n\n> 在链表中查找时，根据next引用依次比较各个节点的key，长度为n的链表节点平均比较次数为n/2\n>\n> 在红黑树中查找时，由于红黑树的特性，节点数为n的红黑树平均比较次数为log(n)\n\n链表长度超过8时树化（TREEIFY），正是因为n=8，就是log(n) < n/2的阈值。而n<6时，log(n) > n/2，红黑树解除树化（UNTREEIFY）。\n\n如果文章内容存在不当之处，请各位读者能不吝赐教，笔者欢迎至极。\n\n<br>\n<br>\n\n#### 参考资料：\n\n[手写一个简单的HashMap - 周周zzz - 博客园 (cnblogs.com)](https://www.cnblogs.com/2511zzZ/p/12770864.html)\n\n[纯手写实现HashMap - Java丨Mr.Chen - 博客园 (cnblogs.com)](https://www.cnblogs.com/chenfei-java/p/10674341.html)\n\n[JavaGuide (gitee.io)](https://snailclimb.gitee.io/javaguide/#/docs/java/collection/HashMap(JDK1.8)源码+底层数据结构分析?id=hashmap-源码分析)","source":"_posts/Java手写一个简单的HashMap.md","raw":"---\ntitle: Java手写一个简单的HashMap\ndate: 2021-09-11 11:56:50\ntags:\n  - HashMap\n  - Java\n  - 手写\ncategories:\n  - 源码剖析和实现\n---\n\n\n\n#### 1.背景介绍\n\nHashMap在Java中是常用的数据结构之一。HashMap 是一个散列表，它存储的内容是键值对(key-value)映射，并具有很快的访问速度。在JDK1.7中，HashMap是基于“数组+链表”实现的，而在JDK1.8以后，HashMap在底层实现中加入了红黑树用于提升查找速率。\n\n![](/img/hashmap.png)\n\t<center><font face=\"宋体\" size=3 color=\"black\">图源网络，侵删</font></center>\n<br>\n\n在JDK1.8中，当链表的长度大于阈值8时，这时这个链表将会转化成红黑树以提升查找效率。为什么阈值是8呢？请读者不妨思考一下这个问题，在文章末尾笔者将给出原因。（提示：想一想在红黑树和链表中查找一个元素的复杂度）\n\n好了，关于HashMap就简单介绍到这里，接下来我们关注于自己实现一个HashMap—MyHashMap。\n\n\n\n#### 2.目标\n\n在本次实现中，我们的目标如下：\n\n* 实现put(k, v)，该方法返回V类型的元素，这里返回为空即可。\n* 实现get(k)，该方法返回这个建对应的值v。\n* 实现remove(k)，该方法将这个键对应的键值对删除，并返回对应的值v，如果不存在对应的键，返回空。\n* 实现size()，该方法返回HashMap中的键值对数目。\n\n明确我们的目标后，就可以关注于具体实现了。\n\n\n\n#### 3.手写HashMap\n\n##### 3.1定义MyMap接口\n\n这个接口定义了我们需要实现的具体行为。\n\n```java\npublic interface MyMap <K, V>{\n    V get(K k);\n\n    V put(K k, V v);\n\n    int size();\n\n    V remove(K k);\n\n    boolean isEmpty();\n}\n```\n\n接下来我们要根据这个接口的定义完成我们的MyHashMap类去实现接口中定义的行为。\n\n\n\n##### 3.2定义链表节点\n\n因为HashMap中存在着链表，所以我们也需要实现一个链表。我们以内部类的形式定义这样一个节点Entry，Entry类保存了\"K-V\"数据，next字段表明它可能会是一个链表节点。\n\n参考形式如下：\n\n```java\npublic class MyHashMap <K,V> implements MyMap<K, V> {\n    //定义内部类Entry作为链表节点\n     class Entry<K, V>{\n         K k;\n         V v;\n         Entry<K,V> next;\n\n         public Entry(K k, V v){\n             this.k = k;\n             this.v = v;\n         }\n     }\n}\n\n```\n\n\n\n##### 3.2定义成员变量\n\n这里参照HashMap设置一个默认的容量capacity和默认的加载因子loadFactor，table就是底层数组，另外，考虑到size方法的实现，这里肯定还需要一个成员变量size用于表示HashMap的大小。\n\n```java\n//定义成员变量\nfinal static int DEFAULT_CAPACITY = 16;\nfinal static float DEFAULT_LOAD_FACTOR = 0.75f;\n\nprivate int capacity;\nprivate float loadFactor;\nprivate int size = 0;\n\nEntry<K,V>[] table;\n```\n\n\n\n##### 3.3实现构造方法\n\n```java\npublic MyHashMap(){\n   this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);\n}\n\npublic MyHashMap(int capacity, float loadFactor){\n   this.capacity = upperMinPowerOf2(capacity);     //获取为2的幂次方的容量大小\n    this.loadFactor = loadFactor;                  //加载因子，用于扩容,本次实现中尚未用到该字段\n    this.table = new Entry[capacity];\n}\n```\n\n这里的`upperMinPowerOf2`的作用是获取大于capacity的最小的2次幂。在HashMap中，开发者采用了更精妙的位运算的方式完成了这个功能，效率比这种方式要更高。capacity要求为2次幂是为了方便HashMap在数组扩容时能够更好地对已存在的元素进行重新哈希。\n\n```java\nprivate static int upperMinPowerOf2(int n){\n    int power = 1;\n    while(power <= n){\n        power *= 2;\n    }\n    return power;\n}\n```\n\n\n\n##### 3.4实现put方法\n\nput方法将传入的键值对封装成一个Entry<K, V>对象进行存入，存入数组中的index我们通过对键哈希取模得到，这样能减少哈希冲突，也就能减少链表的数目，能提高HashMap的查找效率。\n\n假如数组中没有元素，那么直接将该Entry放入对应位置即可。\n\n假如数组中已经存在元素，我们需要遍历这个链表，检查是否存在有相等的key（这里用equals方法会更好），如果存在相等key，那么用新值替换旧值，然后返回；如果不存在，那么就使用头插法插入链表。\n\n记得对size做正确的操作，保持记录的元素个数正确。\n\n```java\n@Override\npublic V put(K k, V v) {\n    // 通过hashcode散列获取索引\n    int index = k.hashCode() % table.length;\n    Entry<K,V> current = table[index];\n    //判断是否已经存在元素\n    if (current!=null){\n        // 遍历链表是否有相等key, 有则替换且返回旧值\n        while (current!=null){\n            if(current.k == k){\n                V oldValue = current.v;\n                current.v = v;\n                return oldValue;\n            }\n            current = current.next;\n        }\n        // 没有则使用头插法\n        table[index] = new Entry<K, V>(k,v, table[index]);\n        size++;\n        return null;\n    }\n    //不存在元素直接放入即可\n    table[index] = new Entry<K, V>(k,v,null);\n    size++;\n    return null;\n}\n```\n\n\n\n##### 3.5实现get方法\n\nget方法通过键k获取对应的值v，根据put中存放的索引位置，get方法中也是一样的计算方法。\n\n遍历链表，如果检查存在键为k的键值对Entry，那么就返回对应的值v，没有则返回空。\n\n```java\n@Override\npublic V get(K k) {\n     int index = k.hashCode() % table.length;\n     Entry<K, V> current = table[index];\n     //遍历链表\n    while (current!=null){\n        if(current.k == k)\n            return current.v;\n        current = current.next;\n    }\n    //不存在则返回空\n    return null;\n}\n```\n\n\n\n##### 3.6实现remove方法\n\nremove方法通过对应的键k删去在HashMap中对应的键值对Entry，同样是遍历链表，不同的是我们需要一个前置节点pre保存当前节点的上一个节点信息，这样才能正确地删除节点。删除成功则将size-1。\n\n如果不存在这样一个节点，返回空。\n\n```java\n@Override\npublic V remove(K k) {\n    int index = k.hashCode() % table.length;\n    V result = null;\n    Entry<K, V> current = table[index];\n    //遍历链表\n    Entry<K, V> pre = null;\n\n    while(current!=null){\n        if(current.k == k){\n            result = current.v;\n            size--;\n            if (pre!=null){\n                pre.next = current.next;\n            }else {\n                table[index] = current.next;\n            }\n\n            return result;\n        }\n        //向下遍历\n        pre = current;\n        current = current.next;\n    }\n\n    return null;\n}\n```\n\n\n\n##### 3.7实现size方法与isEmpty方法\n\n比较简单的实现。\n\n```java\n@Override\npublic int size() {\n    return size;\n}\n\n@Override\npublic boolean isEmpty() {\n\treturn size==0;\n}\n```\n\n\n\n#### 4.测试MyHashMap\n\n测试代码如下：\n\n```java\npublic class hashMap_test {\n    public static void main(String[] args){\n        MyHashMap<Integer, Integer> hashMap = new MyHashMap<>();\n        hashMap.put(1,101);\n        hashMap.put(2,202);\n        hashMap.put(3,303);\n        hashMap.put(1,111);\n\n        int[] keys = new int[]{1,2,3};\n        System.out.println(\"hashMap size:\"+hashMap.size());\n        for(int i=0;i< keys.length;i++){\n            System.out.println(keys[i]+\": \"+hashMap.get(keys[i]));\n        }\n\n        hashMap.remove(1);\n        hashMap.remove(3);\n        System.out.println(\"hashMap size:\"+hashMap.size());\n        System.out.println(1+\": \"+hashMap.get(1));\n        System.out.println(3+\": \"+hashMap.get(3));\n        System.out.println(2+\": \"+hashMap.get(2));  //当然这里其实应该报错的\n    }\n}\n```\n\n\n\n#### 5.总结\n\n本文简单地实现了一个HashMap，实现了Java中HashMap的put、get、remove、size、isEmpty等方法。但其实还有一些工作可以做，比如对HashMap进行扩容，当HashMap中元素过多的时候，我们需要将HashMap扩容以提高其查找速率，其实也就是减少HashMap中链表的数目，还有就是对于空值null的支持，其实HashMap是允许key为null的，当然，这一点不算太难。\n\n对于我自己来说，原本我以为实现HashMap会是一件很困难的事情，所以我迟迟没有自己动手写一个，但是写了以后发现也就是这样，所以我们大家一定要多动手实践，也不要害怕困难，很多时候，其实是我们自己吓住了自己，导致没有去完成本可以完成的事情。\n\n\n\n关于文章开头的那个问题：**为什么当链表中的元素超过8个的时候需要将链表转换成红黑树？**\n\n答案如下：\n\n> 在链表中查找时，根据next引用依次比较各个节点的key，长度为n的链表节点平均比较次数为n/2\n>\n> 在红黑树中查找时，由于红黑树的特性，节点数为n的红黑树平均比较次数为log(n)\n\n链表长度超过8时树化（TREEIFY），正是因为n=8，就是log(n) < n/2的阈值。而n<6时，log(n) > n/2，红黑树解除树化（UNTREEIFY）。\n\n如果文章内容存在不当之处，请各位读者能不吝赐教，笔者欢迎至极。\n\n<br>\n<br>\n\n#### 参考资料：\n\n[手写一个简单的HashMap - 周周zzz - 博客园 (cnblogs.com)](https://www.cnblogs.com/2511zzZ/p/12770864.html)\n\n[纯手写实现HashMap - Java丨Mr.Chen - 博客园 (cnblogs.com)](https://www.cnblogs.com/chenfei-java/p/10674341.html)\n\n[JavaGuide (gitee.io)](https://snailclimb.gitee.io/javaguide/#/docs/java/collection/HashMap(JDK1.8)源码+底层数据结构分析?id=hashmap-源码分析)","slug":"Java手写一个简单的HashMap","published":1,"updated":"2025-03-02T03:55:08.455Z","_id":"cm7r3gl5l000034ty189c05us","comments":1,"layout":"post","photos":[],"content":"<h4 id=\"1-背景介绍\"><a href=\"#1-背景介绍\" class=\"headerlink\" title=\"1.背景介绍\"></a>1.背景介绍</h4><p>HashMap在Java中是常用的数据结构之一。HashMap 是一个散列表，它存储的内容是键值对(key-value)映射，并具有很快的访问速度。在JDK1.7中，HashMap是基于“数组+链表”实现的，而在JDK1.8以后，HashMap在底层实现中加入了红黑树用于提升查找速率。</p>\n<p><img src=\"/img/hashmap.png\"><br>    <center><font face=\"宋体\" size=3 color=\"black\">图源网络，侵删</font></center><br><br></p>\n<p>在JDK1.8中，当链表的长度大于阈值8时，这时这个链表将会转化成红黑树以提升查找效率。为什么阈值是8呢？请读者不妨思考一下这个问题，在文章末尾笔者将给出原因。（提示：想一想在红黑树和链表中查找一个元素的复杂度）</p>\n<p>好了，关于HashMap就简单介绍到这里，接下来我们关注于自己实现一个HashMap—MyHashMap。</p>\n<h4 id=\"2-目标\"><a href=\"#2-目标\" class=\"headerlink\" title=\"2.目标\"></a>2.目标</h4><p>在本次实现中，我们的目标如下：</p>\n<ul>\n<li>实现put(k, v)，该方法返回V类型的元素，这里返回为空即可。</li>\n<li>实现get(k)，该方法返回这个建对应的值v。</li>\n<li>实现remove(k)，该方法将这个键对应的键值对删除，并返回对应的值v，如果不存在对应的键，返回空。</li>\n<li>实现size()，该方法返回HashMap中的键值对数目。</li>\n</ul>\n<p>明确我们的目标后，就可以关注于具体实现了。</p>\n<h4 id=\"3-手写HashMap\"><a href=\"#3-手写HashMap\" class=\"headerlink\" title=\"3.手写HashMap\"></a>3.手写HashMap</h4><h5 id=\"3-1定义MyMap接口\"><a href=\"#3-1定义MyMap接口\" class=\"headerlink\" title=\"3.1定义MyMap接口\"></a>3.1定义MyMap接口</h5><p>这个接口定义了我们需要实现的具体行为。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">MyMap</span> &lt;K, V&gt;&#123;<br>    V <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(K k)</span>;<br><br>    V <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(K k, V v)</span>;<br><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">()</span>;<br><br>    V <span class=\"hljs-title function_\">remove</span><span class=\"hljs-params\">(K k)</span>;<br><br>    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接下来我们要根据这个接口的定义完成我们的MyHashMap类去实现接口中定义的行为。</p>\n<h5 id=\"3-2定义链表节点\"><a href=\"#3-2定义链表节点\" class=\"headerlink\" title=\"3.2定义链表节点\"></a>3.2定义链表节点</h5><p>因为HashMap中存在着链表，所以我们也需要实现一个链表。我们以内部类的形式定义这样一个节点Entry，Entry类保存了”K-V”数据，next字段表明它可能会是一个链表节点。</p>\n<p>参考形式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyHashMap</span> &lt;K,V&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">MyMap</span>&lt;K, V&gt; &#123;<br>    <span class=\"hljs-comment\">//定义内部类Entry作为链表节点</span><br>     <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Entry</span>&lt;K, V&gt;&#123;<br>         K k;<br>         V v;<br>         Entry&lt;K,V&gt; next;<br><br>         <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Entry</span><span class=\"hljs-params\">(K k, V v)</span>&#123;<br>             <span class=\"hljs-built_in\">this</span>.k = k;<br>             <span class=\"hljs-built_in\">this</span>.v = v;<br>         &#125;<br>     &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"3-2定义成员变量\"><a href=\"#3-2定义成员变量\" class=\"headerlink\" title=\"3.2定义成员变量\"></a>3.2定义成员变量</h5><p>这里参照HashMap设置一个默认的容量capacity和默认的加载因子loadFactor，table就是底层数组，另外，考虑到size方法的实现，这里肯定还需要一个成员变量size用于表示HashMap的大小。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//定义成员变量</span><br><span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">DEFAULT_CAPACITY</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">16</span>;<br><span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">DEFAULT_LOAD_FACTOR</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0.75f</span>;<br><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> capacity;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">float</span> loadFactor;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br><br>Entry&lt;K,V&gt;[] table;<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"3-3实现构造方法\"><a href=\"#3-3实现构造方法\" class=\"headerlink\" title=\"3.3实现构造方法\"></a>3.3实现构造方法</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MyHashMap</span><span class=\"hljs-params\">()</span>&#123;<br>   <span class=\"hljs-built_in\">this</span>(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MyHashMap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> capacity, <span class=\"hljs-type\">float</span> loadFactor)</span>&#123;<br>   <span class=\"hljs-built_in\">this</span>.capacity = upperMinPowerOf2(capacity);     <span class=\"hljs-comment\">//获取为2的幂次方的容量大小</span><br>    <span class=\"hljs-built_in\">this</span>.loadFactor = loadFactor;                  <span class=\"hljs-comment\">//加载因子，用于扩容,本次实现中尚未用到该字段</span><br>    <span class=\"hljs-built_in\">this</span>.table = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Entry</span>[capacity];<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这里的<code>upperMinPowerOf2</code>的作用是获取大于capacity的最小的2次幂。在HashMap中，开发者采用了更精妙的位运算的方式完成了这个功能，效率比这种方式要更高。capacity要求为2次幂是为了方便HashMap在数组扩容时能够更好地对已存在的元素进行重新哈希。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">upperMinPowerOf2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span>&#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">power</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span>(power &lt;= n)&#123;<br>        power *= <span class=\"hljs-number\">2</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> power;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"3-4实现put方法\"><a href=\"#3-4实现put方法\" class=\"headerlink\" title=\"3.4实现put方法\"></a>3.4实现put方法</h5><p>put方法将传入的键值对封装成一个Entry&lt;K, V&gt;对象进行存入，存入数组中的index我们通过对键哈希取模得到，这样能减少哈希冲突，也就能减少链表的数目，能提高HashMap的查找效率。</p>\n<p>假如数组中没有元素，那么直接将该Entry放入对应位置即可。</p>\n<p>假如数组中已经存在元素，我们需要遍历这个链表，检查是否存在有相等的key（这里用equals方法会更好），如果存在相等key，那么用新值替换旧值，然后返回；如果不存在，那么就使用头插法插入链表。</p>\n<p>记得对size做正确的操作，保持记录的元素个数正确。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> V <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(K k, V v)</span> &#123;<br>    <span class=\"hljs-comment\">// 通过hashcode散列获取索引</span><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> k.hashCode() % table.length;<br>    Entry&lt;K,V&gt; current = table[index];<br>    <span class=\"hljs-comment\">//判断是否已经存在元素</span><br>    <span class=\"hljs-keyword\">if</span> (current!=<span class=\"hljs-literal\">null</span>)&#123;<br>        <span class=\"hljs-comment\">// 遍历链表是否有相等key, 有则替换且返回旧值</span><br>        <span class=\"hljs-keyword\">while</span> (current!=<span class=\"hljs-literal\">null</span>)&#123;<br>            <span class=\"hljs-keyword\">if</span>(current.k == k)&#123;<br>                <span class=\"hljs-type\">V</span> <span class=\"hljs-variable\">oldValue</span> <span class=\"hljs-operator\">=</span> current.v;<br>                current.v = v;<br>                <span class=\"hljs-keyword\">return</span> oldValue;<br>            &#125;<br>            current = current.next;<br>        &#125;<br>        <span class=\"hljs-comment\">// 没有则使用头插法</span><br>        table[index] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Entry</span>&lt;K, V&gt;(k,v, table[index]);<br>        size++;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>    <span class=\"hljs-comment\">//不存在元素直接放入即可</span><br>    table[index] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Entry</span>&lt;K, V&gt;(k,v,<span class=\"hljs-literal\">null</span>);<br>    size++;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"3-5实现get方法\"><a href=\"#3-5实现get方法\" class=\"headerlink\" title=\"3.5实现get方法\"></a>3.5实现get方法</h5><p>get方法通过键k获取对应的值v，根据put中存放的索引位置，get方法中也是一样的计算方法。</p>\n<p>遍历链表，如果检查存在键为k的键值对Entry，那么就返回对应的值v，没有则返回空。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> V <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(K k)</span> &#123;<br>     <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> k.hashCode() % table.length;<br>     Entry&lt;K, V&gt; current = table[index];<br>     <span class=\"hljs-comment\">//遍历链表</span><br>    <span class=\"hljs-keyword\">while</span> (current!=<span class=\"hljs-literal\">null</span>)&#123;<br>        <span class=\"hljs-keyword\">if</span>(current.k == k)<br>            <span class=\"hljs-keyword\">return</span> current.v;<br>        current = current.next;<br>    &#125;<br>    <span class=\"hljs-comment\">//不存在则返回空</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"3-6实现remove方法\"><a href=\"#3-6实现remove方法\" class=\"headerlink\" title=\"3.6实现remove方法\"></a>3.6实现remove方法</h5><p>remove方法通过对应的键k删去在HashMap中对应的键值对Entry，同样是遍历链表，不同的是我们需要一个前置节点pre保存当前节点的上一个节点信息，这样才能正确地删除节点。删除成功则将size-1。</p>\n<p>如果不存在这样一个节点，返回空。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> V <span class=\"hljs-title function_\">remove</span><span class=\"hljs-params\">(K k)</span> &#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> k.hashCode() % table.length;<br>    <span class=\"hljs-type\">V</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    Entry&lt;K, V&gt; current = table[index];<br>    <span class=\"hljs-comment\">//遍历链表</span><br>    Entry&lt;K, V&gt; pre = <span class=\"hljs-literal\">null</span>;<br><br>    <span class=\"hljs-keyword\">while</span>(current!=<span class=\"hljs-literal\">null</span>)&#123;<br>        <span class=\"hljs-keyword\">if</span>(current.k == k)&#123;<br>            result = current.v;<br>            size--;<br>            <span class=\"hljs-keyword\">if</span> (pre!=<span class=\"hljs-literal\">null</span>)&#123;<br>                pre.next = current.next;<br>            &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>                table[index] = current.next;<br>            &#125;<br><br>            <span class=\"hljs-keyword\">return</span> result;<br>        &#125;<br>        <span class=\"hljs-comment\">//向下遍历</span><br>        pre = current;<br>        current = current.next;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"3-7实现size方法与isEmpty方法\"><a href=\"#3-7实现size方法与isEmpty方法\" class=\"headerlink\" title=\"3.7实现size方法与isEmpty方法\"></a>3.7实现size方法与isEmpty方法</h5><p>比较简单的实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> size;<br>&#125;<br><br><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> size==<span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4-测试MyHashMap\"><a href=\"#4-测试MyHashMap\" class=\"headerlink\" title=\"4.测试MyHashMap\"></a>4.测试MyHashMap</h4><p>测试代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">hashMap_test</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span>&#123;<br>        MyHashMap&lt;Integer, Integer&gt; hashMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyHashMap</span>&lt;&gt;();<br>        hashMap.put(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">101</span>);<br>        hashMap.put(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">202</span>);<br>        hashMap.put(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">303</span>);<br>        hashMap.put(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">111</span>);<br><br>        <span class=\"hljs-type\">int</span>[] keys = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[]&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>&#125;;<br>        System.out.println(<span class=\"hljs-string\">&quot;hashMap size:&quot;</span>+hashMap.size());<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt; keys.length;i++)&#123;<br>            System.out.println(keys[i]+<span class=\"hljs-string\">&quot;: &quot;</span>+hashMap.get(keys[i]));<br>        &#125;<br><br>        hashMap.remove(<span class=\"hljs-number\">1</span>);<br>        hashMap.remove(<span class=\"hljs-number\">3</span>);<br>        System.out.println(<span class=\"hljs-string\">&quot;hashMap size:&quot;</span>+hashMap.size());<br>        System.out.println(<span class=\"hljs-number\">1</span>+<span class=\"hljs-string\">&quot;: &quot;</span>+hashMap.get(<span class=\"hljs-number\">1</span>));<br>        System.out.println(<span class=\"hljs-number\">3</span>+<span class=\"hljs-string\">&quot;: &quot;</span>+hashMap.get(<span class=\"hljs-number\">3</span>));<br>        System.out.println(<span class=\"hljs-number\">2</span>+<span class=\"hljs-string\">&quot;: &quot;</span>+hashMap.get(<span class=\"hljs-number\">2</span>));  <span class=\"hljs-comment\">//当然这里其实应该报错的</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5.总结\"></a>5.总结</h4><p>本文简单地实现了一个HashMap，实现了Java中HashMap的put、get、remove、size、isEmpty等方法。但其实还有一些工作可以做，比如对HashMap进行扩容，当HashMap中元素过多的时候，我们需要将HashMap扩容以提高其查找速率，其实也就是减少HashMap中链表的数目，还有就是对于空值null的支持，其实HashMap是允许key为null的，当然，这一点不算太难。</p>\n<p>对于我自己来说，原本我以为实现HashMap会是一件很困难的事情，所以我迟迟没有自己动手写一个，但是写了以后发现也就是这样，所以我们大家一定要多动手实践，也不要害怕困难，很多时候，其实是我们自己吓住了自己，导致没有去完成本可以完成的事情。</p>\n<p>关于文章开头的那个问题：<strong>为什么当链表中的元素超过8个的时候需要将链表转换成红黑树？</strong></p>\n<p>答案如下：</p>\n<blockquote>\n<p>在链表中查找时，根据next引用依次比较各个节点的key，长度为n的链表节点平均比较次数为n&#x2F;2</p>\n<p>在红黑树中查找时，由于红黑树的特性，节点数为n的红黑树平均比较次数为log(n)</p>\n</blockquote>\n<p>链表长度超过8时树化（TREEIFY），正是因为n&#x3D;8，就是log(n) &lt; n&#x2F;2的阈值。而n&lt;6时，log(n) &gt; n&#x2F;2，红黑树解除树化（UNTREEIFY）。</p>\n<p>如果文章内容存在不当之处，请各位读者能不吝赐教，笔者欢迎至极。</p>\n<br>\n<br>\n\n<h4 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h4><p><a href=\"https://www.cnblogs.com/2511zzZ/p/12770864.html\">手写一个简单的HashMap - 周周zzz - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://www.cnblogs.com/chenfei-java/p/10674341.html\">纯手写实现HashMap - Java丨Mr.Chen - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://snailclimb.gitee.io/javaguide/#/docs/java/collection/HashMap(JDK1.8)%E6%BA%90%E7%A0%81+%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90?id=hashmap-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\">JavaGuide (gitee.io)</a></p>\n","excerpt":"","more":"<h4 id=\"1-背景介绍\"><a href=\"#1-背景介绍\" class=\"headerlink\" title=\"1.背景介绍\"></a>1.背景介绍</h4><p>HashMap在Java中是常用的数据结构之一。HashMap 是一个散列表，它存储的内容是键值对(key-value)映射，并具有很快的访问速度。在JDK1.7中，HashMap是基于“数组+链表”实现的，而在JDK1.8以后，HashMap在底层实现中加入了红黑树用于提升查找速率。</p>\n<p><img src=\"/img/hashmap.png\"><br>    <center><font face=\"宋体\" size=3 color=\"black\">图源网络，侵删</font></center><br><br></p>\n<p>在JDK1.8中，当链表的长度大于阈值8时，这时这个链表将会转化成红黑树以提升查找效率。为什么阈值是8呢？请读者不妨思考一下这个问题，在文章末尾笔者将给出原因。（提示：想一想在红黑树和链表中查找一个元素的复杂度）</p>\n<p>好了，关于HashMap就简单介绍到这里，接下来我们关注于自己实现一个HashMap—MyHashMap。</p>\n<h4 id=\"2-目标\"><a href=\"#2-目标\" class=\"headerlink\" title=\"2.目标\"></a>2.目标</h4><p>在本次实现中，我们的目标如下：</p>\n<ul>\n<li>实现put(k, v)，该方法返回V类型的元素，这里返回为空即可。</li>\n<li>实现get(k)，该方法返回这个建对应的值v。</li>\n<li>实现remove(k)，该方法将这个键对应的键值对删除，并返回对应的值v，如果不存在对应的键，返回空。</li>\n<li>实现size()，该方法返回HashMap中的键值对数目。</li>\n</ul>\n<p>明确我们的目标后，就可以关注于具体实现了。</p>\n<h4 id=\"3-手写HashMap\"><a href=\"#3-手写HashMap\" class=\"headerlink\" title=\"3.手写HashMap\"></a>3.手写HashMap</h4><h5 id=\"3-1定义MyMap接口\"><a href=\"#3-1定义MyMap接口\" class=\"headerlink\" title=\"3.1定义MyMap接口\"></a>3.1定义MyMap接口</h5><p>这个接口定义了我们需要实现的具体行为。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">MyMap</span> &lt;K, V&gt;&#123;<br>    V <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(K k)</span>;<br><br>    V <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(K k, V v)</span>;<br><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">()</span>;<br><br>    V <span class=\"hljs-title function_\">remove</span><span class=\"hljs-params\">(K k)</span>;<br><br>    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>接下来我们要根据这个接口的定义完成我们的MyHashMap类去实现接口中定义的行为。</p>\n<h5 id=\"3-2定义链表节点\"><a href=\"#3-2定义链表节点\" class=\"headerlink\" title=\"3.2定义链表节点\"></a>3.2定义链表节点</h5><p>因为HashMap中存在着链表，所以我们也需要实现一个链表。我们以内部类的形式定义这样一个节点Entry，Entry类保存了”K-V”数据，next字段表明它可能会是一个链表节点。</p>\n<p>参考形式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyHashMap</span> &lt;K,V&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">MyMap</span>&lt;K, V&gt; &#123;<br>    <span class=\"hljs-comment\">//定义内部类Entry作为链表节点</span><br>     <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Entry</span>&lt;K, V&gt;&#123;<br>         K k;<br>         V v;<br>         Entry&lt;K,V&gt; next;<br><br>         <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Entry</span><span class=\"hljs-params\">(K k, V v)</span>&#123;<br>             <span class=\"hljs-built_in\">this</span>.k = k;<br>             <span class=\"hljs-built_in\">this</span>.v = v;<br>         &#125;<br>     &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"3-2定义成员变量\"><a href=\"#3-2定义成员变量\" class=\"headerlink\" title=\"3.2定义成员变量\"></a>3.2定义成员变量</h5><p>这里参照HashMap设置一个默认的容量capacity和默认的加载因子loadFactor，table就是底层数组，另外，考虑到size方法的实现，这里肯定还需要一个成员变量size用于表示HashMap的大小。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//定义成员变量</span><br><span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">DEFAULT_CAPACITY</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">16</span>;<br><span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">DEFAULT_LOAD_FACTOR</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0.75f</span>;<br><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> capacity;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">float</span> loadFactor;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br><br>Entry&lt;K,V&gt;[] table;<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"3-3实现构造方法\"><a href=\"#3-3实现构造方法\" class=\"headerlink\" title=\"3.3实现构造方法\"></a>3.3实现构造方法</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MyHashMap</span><span class=\"hljs-params\">()</span>&#123;<br>   <span class=\"hljs-built_in\">this</span>(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MyHashMap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> capacity, <span class=\"hljs-type\">float</span> loadFactor)</span>&#123;<br>   <span class=\"hljs-built_in\">this</span>.capacity = upperMinPowerOf2(capacity);     <span class=\"hljs-comment\">//获取为2的幂次方的容量大小</span><br>    <span class=\"hljs-built_in\">this</span>.loadFactor = loadFactor;                  <span class=\"hljs-comment\">//加载因子，用于扩容,本次实现中尚未用到该字段</span><br>    <span class=\"hljs-built_in\">this</span>.table = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Entry</span>[capacity];<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这里的<code>upperMinPowerOf2</code>的作用是获取大于capacity的最小的2次幂。在HashMap中，开发者采用了更精妙的位运算的方式完成了这个功能，效率比这种方式要更高。capacity要求为2次幂是为了方便HashMap在数组扩容时能够更好地对已存在的元素进行重新哈希。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">upperMinPowerOf2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span>&#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">power</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span>(power &lt;= n)&#123;<br>        power *= <span class=\"hljs-number\">2</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> power;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"3-4实现put方法\"><a href=\"#3-4实现put方法\" class=\"headerlink\" title=\"3.4实现put方法\"></a>3.4实现put方法</h5><p>put方法将传入的键值对封装成一个Entry&lt;K, V&gt;对象进行存入，存入数组中的index我们通过对键哈希取模得到，这样能减少哈希冲突，也就能减少链表的数目，能提高HashMap的查找效率。</p>\n<p>假如数组中没有元素，那么直接将该Entry放入对应位置即可。</p>\n<p>假如数组中已经存在元素，我们需要遍历这个链表，检查是否存在有相等的key（这里用equals方法会更好），如果存在相等key，那么用新值替换旧值，然后返回；如果不存在，那么就使用头插法插入链表。</p>\n<p>记得对size做正确的操作，保持记录的元素个数正确。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> V <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(K k, V v)</span> &#123;<br>    <span class=\"hljs-comment\">// 通过hashcode散列获取索引</span><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> k.hashCode() % table.length;<br>    Entry&lt;K,V&gt; current = table[index];<br>    <span class=\"hljs-comment\">//判断是否已经存在元素</span><br>    <span class=\"hljs-keyword\">if</span> (current!=<span class=\"hljs-literal\">null</span>)&#123;<br>        <span class=\"hljs-comment\">// 遍历链表是否有相等key, 有则替换且返回旧值</span><br>        <span class=\"hljs-keyword\">while</span> (current!=<span class=\"hljs-literal\">null</span>)&#123;<br>            <span class=\"hljs-keyword\">if</span>(current.k == k)&#123;<br>                <span class=\"hljs-type\">V</span> <span class=\"hljs-variable\">oldValue</span> <span class=\"hljs-operator\">=</span> current.v;<br>                current.v = v;<br>                <span class=\"hljs-keyword\">return</span> oldValue;<br>            &#125;<br>            current = current.next;<br>        &#125;<br>        <span class=\"hljs-comment\">// 没有则使用头插法</span><br>        table[index] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Entry</span>&lt;K, V&gt;(k,v, table[index]);<br>        size++;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>    <span class=\"hljs-comment\">//不存在元素直接放入即可</span><br>    table[index] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Entry</span>&lt;K, V&gt;(k,v,<span class=\"hljs-literal\">null</span>);<br>    size++;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"3-5实现get方法\"><a href=\"#3-5实现get方法\" class=\"headerlink\" title=\"3.5实现get方法\"></a>3.5实现get方法</h5><p>get方法通过键k获取对应的值v，根据put中存放的索引位置，get方法中也是一样的计算方法。</p>\n<p>遍历链表，如果检查存在键为k的键值对Entry，那么就返回对应的值v，没有则返回空。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> V <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(K k)</span> &#123;<br>     <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> k.hashCode() % table.length;<br>     Entry&lt;K, V&gt; current = table[index];<br>     <span class=\"hljs-comment\">//遍历链表</span><br>    <span class=\"hljs-keyword\">while</span> (current!=<span class=\"hljs-literal\">null</span>)&#123;<br>        <span class=\"hljs-keyword\">if</span>(current.k == k)<br>            <span class=\"hljs-keyword\">return</span> current.v;<br>        current = current.next;<br>    &#125;<br>    <span class=\"hljs-comment\">//不存在则返回空</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"3-6实现remove方法\"><a href=\"#3-6实现remove方法\" class=\"headerlink\" title=\"3.6实现remove方法\"></a>3.6实现remove方法</h5><p>remove方法通过对应的键k删去在HashMap中对应的键值对Entry，同样是遍历链表，不同的是我们需要一个前置节点pre保存当前节点的上一个节点信息，这样才能正确地删除节点。删除成功则将size-1。</p>\n<p>如果不存在这样一个节点，返回空。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> V <span class=\"hljs-title function_\">remove</span><span class=\"hljs-params\">(K k)</span> &#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> k.hashCode() % table.length;<br>    <span class=\"hljs-type\">V</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    Entry&lt;K, V&gt; current = table[index];<br>    <span class=\"hljs-comment\">//遍历链表</span><br>    Entry&lt;K, V&gt; pre = <span class=\"hljs-literal\">null</span>;<br><br>    <span class=\"hljs-keyword\">while</span>(current!=<span class=\"hljs-literal\">null</span>)&#123;<br>        <span class=\"hljs-keyword\">if</span>(current.k == k)&#123;<br>            result = current.v;<br>            size--;<br>            <span class=\"hljs-keyword\">if</span> (pre!=<span class=\"hljs-literal\">null</span>)&#123;<br>                pre.next = current.next;<br>            &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>                table[index] = current.next;<br>            &#125;<br><br>            <span class=\"hljs-keyword\">return</span> result;<br>        &#125;<br>        <span class=\"hljs-comment\">//向下遍历</span><br>        pre = current;<br>        current = current.next;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"3-7实现size方法与isEmpty方法\"><a href=\"#3-7实现size方法与isEmpty方法\" class=\"headerlink\" title=\"3.7实现size方法与isEmpty方法\"></a>3.7实现size方法与isEmpty方法</h5><p>比较简单的实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> size;<br>&#125;<br><br><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> size==<span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4-测试MyHashMap\"><a href=\"#4-测试MyHashMap\" class=\"headerlink\" title=\"4.测试MyHashMap\"></a>4.测试MyHashMap</h4><p>测试代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">hashMap_test</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span>&#123;<br>        MyHashMap&lt;Integer, Integer&gt; hashMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyHashMap</span>&lt;&gt;();<br>        hashMap.put(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">101</span>);<br>        hashMap.put(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">202</span>);<br>        hashMap.put(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">303</span>);<br>        hashMap.put(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">111</span>);<br><br>        <span class=\"hljs-type\">int</span>[] keys = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[]&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>&#125;;<br>        System.out.println(<span class=\"hljs-string\">&quot;hashMap size:&quot;</span>+hashMap.size());<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt; keys.length;i++)&#123;<br>            System.out.println(keys[i]+<span class=\"hljs-string\">&quot;: &quot;</span>+hashMap.get(keys[i]));<br>        &#125;<br><br>        hashMap.remove(<span class=\"hljs-number\">1</span>);<br>        hashMap.remove(<span class=\"hljs-number\">3</span>);<br>        System.out.println(<span class=\"hljs-string\">&quot;hashMap size:&quot;</span>+hashMap.size());<br>        System.out.println(<span class=\"hljs-number\">1</span>+<span class=\"hljs-string\">&quot;: &quot;</span>+hashMap.get(<span class=\"hljs-number\">1</span>));<br>        System.out.println(<span class=\"hljs-number\">3</span>+<span class=\"hljs-string\">&quot;: &quot;</span>+hashMap.get(<span class=\"hljs-number\">3</span>));<br>        System.out.println(<span class=\"hljs-number\">2</span>+<span class=\"hljs-string\">&quot;: &quot;</span>+hashMap.get(<span class=\"hljs-number\">2</span>));  <span class=\"hljs-comment\">//当然这里其实应该报错的</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5.总结\"></a>5.总结</h4><p>本文简单地实现了一个HashMap，实现了Java中HashMap的put、get、remove、size、isEmpty等方法。但其实还有一些工作可以做，比如对HashMap进行扩容，当HashMap中元素过多的时候，我们需要将HashMap扩容以提高其查找速率，其实也就是减少HashMap中链表的数目，还有就是对于空值null的支持，其实HashMap是允许key为null的，当然，这一点不算太难。</p>\n<p>对于我自己来说，原本我以为实现HashMap会是一件很困难的事情，所以我迟迟没有自己动手写一个，但是写了以后发现也就是这样，所以我们大家一定要多动手实践，也不要害怕困难，很多时候，其实是我们自己吓住了自己，导致没有去完成本可以完成的事情。</p>\n<p>关于文章开头的那个问题：<strong>为什么当链表中的元素超过8个的时候需要将链表转换成红黑树？</strong></p>\n<p>答案如下：</p>\n<blockquote>\n<p>在链表中查找时，根据next引用依次比较各个节点的key，长度为n的链表节点平均比较次数为n&#x2F;2</p>\n<p>在红黑树中查找时，由于红黑树的特性，节点数为n的红黑树平均比较次数为log(n)</p>\n</blockquote>\n<p>链表长度超过8时树化（TREEIFY），正是因为n&#x3D;8，就是log(n) &lt; n&#x2F;2的阈值。而n&lt;6时，log(n) &gt; n&#x2F;2，红黑树解除树化（UNTREEIFY）。</p>\n<p>如果文章内容存在不当之处，请各位读者能不吝赐教，笔者欢迎至极。</p>\n<br>\n<br>\n\n<h4 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h4><p><a href=\"https://www.cnblogs.com/2511zzZ/p/12770864.html\">手写一个简单的HashMap - 周周zzz - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://www.cnblogs.com/chenfei-java/p/10674341.html\">纯手写实现HashMap - Java丨Mr.Chen - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://snailclimb.gitee.io/javaguide/#/docs/java/collection/HashMap(JDK1.8)%E6%BA%90%E7%A0%81+%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90?id=hashmap-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\">JavaGuide (gitee.io)</a></p>\n"},{"title":"容器镜像系列教程:(一)初识Docker","date":"2025-03-02T03:58:50.000Z","_content":"\n## Docker技术简介\n\nDocker，目前非常热门的一项技术，只要你从事软件开发，就一定听说过这项技术。那，Docker究竟是什么？让我们来看下维基百科对它下的定义：**Docker 是一种工具，用于在轻量级容器中自动部署应用程序，以便应用程序可以在不同的环境中隔离高效工作**。Docker容器技术在云计算时代是非常重要的技术底座，极大地提升了程序的部署和分发效率。\n\n## 为什么要使用Docker\n\n为什么要使用Docker？在回答这个问题之前，我们需要先看一下在容器技术出现之前，大家是使用什么环境去部署应用程序的。\n\n在Docker技术之前，大家基本上是使用虚拟机来进行应用部署的。比方说，我开发了一个qq这样的应用程序，我需要部署它的服务端，我需要将qq的软件包上传到虚拟机上，再对虚拟机上的环境变量或者配置文件进行编辑，最终，再使用启动脚本运行该程序，这就是一个常见的部署场景，但是，这中间有两个问题，第一个问题是**多实例的扩容非常麻烦**，假设需要在另一台服务器上再部署该程序，需要将虚拟机上的应用程序打包，同时还要在另一台服务器上安装各种各样的依赖，如果已经做成标准化的脚本还好，要是没有，那得麻烦死；第二个问题是**虚拟机本身是重载的，消耗资源**，运行虚拟机本身就是很耗费资源的一件事，同时，如果在一个虚拟机上跑多个应用程序，程序之间可能会存在互相影响，导致多个应用程序运行异常。\n\n为了解决上面提到的两个问题，Docker技术应运而生，同时兼顾了轻量化、隔离性好和容易迁移的特性。\n\n应用在容器中运行，容器运行在宿主机上，每个容器是单独的、互相隔离的环境。容器的应用部署架构图和虚拟机的应用架构部署图如下，区别在于虚拟机部署需要一套重载的OS系统，这消耗了大量不必要的资源。\n\n![img](/img/容器镜像系列教程/容器VS虚拟机.png)\n\n\n\n## Docker技术原理\n\n### 核心概念\n\n在Docker技术中，有以下三种核心概念：\n\n* 镜像（Image)：\n\n  镜像是容器的静态模板，包含运行应用程序所需的所有文件和配置。镜像由多层只读文件系统组成，每一层代表一个构建步骤（如安装软件、添加文件）。镜像通过`Dockerfile`定义，使用`docker build`命令构建。\n\n* 容器（Container)：\n\n  容器是Docker的核心运行单元，是一个轻量级、独立、可执行的软件包，包含应用程序及其所有依赖项（如库、环境变量、配置文件）。容器基于镜像创建，运行在隔离的用户空间中，与宿主机共享操作系统内核，但拥有独立的文件系统、网络和进程空间。\n\n* 仓库（Registry）：\n\n  仓库是用于存储和分发镜像的集中化平台，分为公共仓库（如Docker Hub）和私有仓库（如自建Harbor）。镜像通过`docker push`上传到仓库，通过`docker pull`下载。\n\n三者之间的关系可以用下图表示：\n\n![img](/img/容器镜像系列教程/docker操作流程图.png)\n\n### 底层技术原理\n\n相信听到docker的神奇效果，你也会想知道到底docker是如何实现这样神奇的功效的，下面来介绍一下Docker容器化技术所使用到的两大核心底层技术：命名空间（Namespace）和控制组（CGroup）。\n\n------\n\n#### 1. **命名空间（Namespace）**\n\n命名空间是Linux内核提供的一种隔离机制，用于将系统资源（如进程、网络、文件系统等）划分为独立的虚拟空间，使得每个命名空间中的资源对其他命名空间不可见。容器通过命名空间实现资源隔离，确保每个容器拥有独立的运行环境。\n\n**主要命名空间类型**：\n\n- **PID Namespace**：隔离进程ID，容器内的进程从PID 1开始，与宿主机进程隔离。\n- **Mount Namespace**：隔离文件系统挂载点，容器拥有独立的文件系统视图。\n- **Network Namespace**：隔离网络接口、IP地址、路由表等，容器拥有独立的网络栈。\n- **UTS Namespace**：隔离主机名和域名，容器可以拥有独立的主机名。\n- **IPC Namespace**：隔离进程间通信（如消息队列、共享内存）。\n- **User Namespace**：隔离用户和用户组ID，容器内的root用户不等于宿主机的root用户。\n\n**作用**：\n\n- 提供资源隔离，确保容器之间互不干扰。\n- 增强安全性，限制容器对宿主机和其他容器的影响。\n\n------\n\n#### 2. **控制组（CGroup）**\n\n控制组是Linux内核提供的一种资源管理机制，用于限制、记录和隔离进程组的资源使用（如CPU、内存、磁盘I/O等）。容器通过CGroup实现资源限制和优先级控制，确保容器不会过度占用宿主机资源。\n\n**主要功能**：\n\n- 资源限制：限制容器使用的CPU、内存、磁盘I/O等资源。\n- 优先级控制：为容器分配资源使用优先级。\n- 资源统计：记录容器的资源使用情况，便于监控和优化。\n- **进程控制**：冻结、恢复或终止容器内的进程。\n\n**作用**：\n\n- 防止单个容器耗尽宿主机资源，影响其他容器或系统稳定性。\n- 提供细粒度的资源管理，优化资源利用率。\n\n------\n\n####  **命名空间与CGroup的关系**\n\n- **命名空间**：负责资源隔离，确保容器拥有独立的运行环境。\n- **CGroup**：负责资源限制，确保容器不会过度占用资源。\n  两者结合，共同实现容器的轻量级虚拟化和资源管理。\n\n\n\n## Docker实用工具和生态\n\n1. **开发与部署工具**  \n   - **Docker Compose**：多容器编排的YAML定义（`docker-compose.yml`）。\n   - **Docker Swarm**：原生集群管理（与Kubernetes的定位差异）。\n   - **Kubernetes集成**：Docker作为容器运行时（CRI规范）。\n\n2. **镜像与安全工具**  \n   - **Docker Slim**：镜像瘦身优化。\n   - **Trivy/Clair**：镜像漏洞扫描。\n   - **Docker Bench for Security**：安全基线检查。\n\n3. **监控与可视化**  \n   - **cAdvisor**：容器资源监控。\n   - **Portainer**：图形化管理界面。\n\n4. **CI/CD场景实践**  \n   - **GitLab CI与Docker**：自动化构建与测试。\n   - **Jenkins Pipeline**：容器化构建环境配置。\n\n---\n\n### **结语**\n在当前的云计算领域，K8S已经成为编排部署的事实标准，而K8S正是使用容器化技术作为根基，随着越来越多的人使用容器化技术，容器化将继续为人们带来高效便捷的部署能力，并发展出新的功能特性，反过来推动云原生发展壮大。本文碍于篇幅，只对核心概念和原理等做了简要概述，该系列文章后续将更侧重于实际的使用，我们下一篇文章再见！\n\n---\n\n### **参考资料**\n\n[Docker: Accelerated Container Application Development](https://www.docker.com/)\n\n[Docker容器技术介绍（内含详细教程） - 知乎](https://zhuanlan.zhihu.com/p/126687430)\n\n[Docker (software) - Wikipedia](https://en.wikipedia.org/wiki/Docker_(software))","source":"_posts/容器镜像系列教程-(一)初识Docker.md","raw":"---\ntitle: 容器镜像系列教程:(一)初识Docker\ndate: 2025-03-02 11:58:50\ntags:\n  - 容器\n  - Docker\n  - 镜像\ncategories:\n  - [系列教程,容器镜像系列教程]\n---\n\n## Docker技术简介\n\nDocker，目前非常热门的一项技术，只要你从事软件开发，就一定听说过这项技术。那，Docker究竟是什么？让我们来看下维基百科对它下的定义：**Docker 是一种工具，用于在轻量级容器中自动部署应用程序，以便应用程序可以在不同的环境中隔离高效工作**。Docker容器技术在云计算时代是非常重要的技术底座，极大地提升了程序的部署和分发效率。\n\n## 为什么要使用Docker\n\n为什么要使用Docker？在回答这个问题之前，我们需要先看一下在容器技术出现之前，大家是使用什么环境去部署应用程序的。\n\n在Docker技术之前，大家基本上是使用虚拟机来进行应用部署的。比方说，我开发了一个qq这样的应用程序，我需要部署它的服务端，我需要将qq的软件包上传到虚拟机上，再对虚拟机上的环境变量或者配置文件进行编辑，最终，再使用启动脚本运行该程序，这就是一个常见的部署场景，但是，这中间有两个问题，第一个问题是**多实例的扩容非常麻烦**，假设需要在另一台服务器上再部署该程序，需要将虚拟机上的应用程序打包，同时还要在另一台服务器上安装各种各样的依赖，如果已经做成标准化的脚本还好，要是没有，那得麻烦死；第二个问题是**虚拟机本身是重载的，消耗资源**，运行虚拟机本身就是很耗费资源的一件事，同时，如果在一个虚拟机上跑多个应用程序，程序之间可能会存在互相影响，导致多个应用程序运行异常。\n\n为了解决上面提到的两个问题，Docker技术应运而生，同时兼顾了轻量化、隔离性好和容易迁移的特性。\n\n应用在容器中运行，容器运行在宿主机上，每个容器是单独的、互相隔离的环境。容器的应用部署架构图和虚拟机的应用架构部署图如下，区别在于虚拟机部署需要一套重载的OS系统，这消耗了大量不必要的资源。\n\n![img](/img/容器镜像系列教程/容器VS虚拟机.png)\n\n\n\n## Docker技术原理\n\n### 核心概念\n\n在Docker技术中，有以下三种核心概念：\n\n* 镜像（Image)：\n\n  镜像是容器的静态模板，包含运行应用程序所需的所有文件和配置。镜像由多层只读文件系统组成，每一层代表一个构建步骤（如安装软件、添加文件）。镜像通过`Dockerfile`定义，使用`docker build`命令构建。\n\n* 容器（Container)：\n\n  容器是Docker的核心运行单元，是一个轻量级、独立、可执行的软件包，包含应用程序及其所有依赖项（如库、环境变量、配置文件）。容器基于镜像创建，运行在隔离的用户空间中，与宿主机共享操作系统内核，但拥有独立的文件系统、网络和进程空间。\n\n* 仓库（Registry）：\n\n  仓库是用于存储和分发镜像的集中化平台，分为公共仓库（如Docker Hub）和私有仓库（如自建Harbor）。镜像通过`docker push`上传到仓库，通过`docker pull`下载。\n\n三者之间的关系可以用下图表示：\n\n![img](/img/容器镜像系列教程/docker操作流程图.png)\n\n### 底层技术原理\n\n相信听到docker的神奇效果，你也会想知道到底docker是如何实现这样神奇的功效的，下面来介绍一下Docker容器化技术所使用到的两大核心底层技术：命名空间（Namespace）和控制组（CGroup）。\n\n------\n\n#### 1. **命名空间（Namespace）**\n\n命名空间是Linux内核提供的一种隔离机制，用于将系统资源（如进程、网络、文件系统等）划分为独立的虚拟空间，使得每个命名空间中的资源对其他命名空间不可见。容器通过命名空间实现资源隔离，确保每个容器拥有独立的运行环境。\n\n**主要命名空间类型**：\n\n- **PID Namespace**：隔离进程ID，容器内的进程从PID 1开始，与宿主机进程隔离。\n- **Mount Namespace**：隔离文件系统挂载点，容器拥有独立的文件系统视图。\n- **Network Namespace**：隔离网络接口、IP地址、路由表等，容器拥有独立的网络栈。\n- **UTS Namespace**：隔离主机名和域名，容器可以拥有独立的主机名。\n- **IPC Namespace**：隔离进程间通信（如消息队列、共享内存）。\n- **User Namespace**：隔离用户和用户组ID，容器内的root用户不等于宿主机的root用户。\n\n**作用**：\n\n- 提供资源隔离，确保容器之间互不干扰。\n- 增强安全性，限制容器对宿主机和其他容器的影响。\n\n------\n\n#### 2. **控制组（CGroup）**\n\n控制组是Linux内核提供的一种资源管理机制，用于限制、记录和隔离进程组的资源使用（如CPU、内存、磁盘I/O等）。容器通过CGroup实现资源限制和优先级控制，确保容器不会过度占用宿主机资源。\n\n**主要功能**：\n\n- 资源限制：限制容器使用的CPU、内存、磁盘I/O等资源。\n- 优先级控制：为容器分配资源使用优先级。\n- 资源统计：记录容器的资源使用情况，便于监控和优化。\n- **进程控制**：冻结、恢复或终止容器内的进程。\n\n**作用**：\n\n- 防止单个容器耗尽宿主机资源，影响其他容器或系统稳定性。\n- 提供细粒度的资源管理，优化资源利用率。\n\n------\n\n####  **命名空间与CGroup的关系**\n\n- **命名空间**：负责资源隔离，确保容器拥有独立的运行环境。\n- **CGroup**：负责资源限制，确保容器不会过度占用资源。\n  两者结合，共同实现容器的轻量级虚拟化和资源管理。\n\n\n\n## Docker实用工具和生态\n\n1. **开发与部署工具**  \n   - **Docker Compose**：多容器编排的YAML定义（`docker-compose.yml`）。\n   - **Docker Swarm**：原生集群管理（与Kubernetes的定位差异）。\n   - **Kubernetes集成**：Docker作为容器运行时（CRI规范）。\n\n2. **镜像与安全工具**  \n   - **Docker Slim**：镜像瘦身优化。\n   - **Trivy/Clair**：镜像漏洞扫描。\n   - **Docker Bench for Security**：安全基线检查。\n\n3. **监控与可视化**  \n   - **cAdvisor**：容器资源监控。\n   - **Portainer**：图形化管理界面。\n\n4. **CI/CD场景实践**  \n   - **GitLab CI与Docker**：自动化构建与测试。\n   - **Jenkins Pipeline**：容器化构建环境配置。\n\n---\n\n### **结语**\n在当前的云计算领域，K8S已经成为编排部署的事实标准，而K8S正是使用容器化技术作为根基，随着越来越多的人使用容器化技术，容器化将继续为人们带来高效便捷的部署能力，并发展出新的功能特性，反过来推动云原生发展壮大。本文碍于篇幅，只对核心概念和原理等做了简要概述，该系列文章后续将更侧重于实际的使用，我们下一篇文章再见！\n\n---\n\n### **参考资料**\n\n[Docker: Accelerated Container Application Development](https://www.docker.com/)\n\n[Docker容器技术介绍（内含详细教程） - 知乎](https://zhuanlan.zhihu.com/p/126687430)\n\n[Docker (software) - Wikipedia](https://en.wikipedia.org/wiki/Docker_(software))","slug":"容器镜像系列教程-(一)初识Docker","published":1,"updated":"2025-03-02T10:11:22.961Z","_id":"cm7rh3cyn0000asty28ke56oc","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"Docker技术简介\"><a href=\"#Docker技术简介\" class=\"headerlink\" title=\"Docker技术简介\"></a>Docker技术简介</h2><p>Docker，目前非常热门的一项技术，只要你从事软件开发，就一定听说过这项技术。那，Docker究竟是什么？让我们来看下维基百科对它下的定义：<strong>Docker 是一种工具，用于在轻量级容器中自动部署应用程序，以便应用程序可以在不同的环境中隔离高效工作</strong>。Docker容器技术在云计算时代是非常重要的技术底座，极大地提升了程序的部署和分发效率。</p>\n<h2 id=\"为什么要使用Docker\"><a href=\"#为什么要使用Docker\" class=\"headerlink\" title=\"为什么要使用Docker\"></a>为什么要使用Docker</h2><p>为什么要使用Docker？在回答这个问题之前，我们需要先看一下在容器技术出现之前，大家是使用什么环境去部署应用程序的。</p>\n<p>在Docker技术之前，大家基本上是使用虚拟机来进行应用部署的。比方说，我开发了一个qq这样的应用程序，我需要部署它的服务端，我需要将qq的软件包上传到虚拟机上，再对虚拟机上的环境变量或者配置文件进行编辑，最终，再使用启动脚本运行该程序，这就是一个常见的部署场景，但是，这中间有两个问题，第一个问题是<strong>多实例的扩容非常麻烦</strong>，假设需要在另一台服务器上再部署该程序，需要将虚拟机上的应用程序打包，同时还要在另一台服务器上安装各种各样的依赖，如果已经做成标准化的脚本还好，要是没有，那得麻烦死；第二个问题是<strong>虚拟机本身是重载的，消耗资源</strong>，运行虚拟机本身就是很耗费资源的一件事，同时，如果在一个虚拟机上跑多个应用程序，程序之间可能会存在互相影响，导致多个应用程序运行异常。</p>\n<p>为了解决上面提到的两个问题，Docker技术应运而生，同时兼顾了轻量化、隔离性好和容易迁移的特性。</p>\n<p>应用在容器中运行，容器运行在宿主机上，每个容器是单独的、互相隔离的环境。容器的应用部署架构图和虚拟机的应用架构部署图如下，区别在于虚拟机部署需要一套重载的OS系统，这消耗了大量不必要的资源。</p>\n<p><img src=\"/img/%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E5%AE%B9%E5%99%A8VS%E8%99%9A%E6%8B%9F%E6%9C%BA.png\" alt=\"img\"></p>\n<h2 id=\"Docker技术原理\"><a href=\"#Docker技术原理\" class=\"headerlink\" title=\"Docker技术原理\"></a>Docker技术原理</h2><h3 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h3><p>在Docker技术中，有以下三种核心概念：</p>\n<ul>\n<li><p>镜像（Image)：</p>\n<p>镜像是容器的静态模板，包含运行应用程序所需的所有文件和配置。镜像由多层只读文件系统组成，每一层代表一个构建步骤（如安装软件、添加文件）。镜像通过<code>Dockerfile</code>定义，使用<code>docker build</code>命令构建。</p>\n</li>\n<li><p>容器（Container)：</p>\n<p>容器是Docker的核心运行单元，是一个轻量级、独立、可执行的软件包，包含应用程序及其所有依赖项（如库、环境变量、配置文件）。容器基于镜像创建，运行在隔离的用户空间中，与宿主机共享操作系统内核，但拥有独立的文件系统、网络和进程空间。</p>\n</li>\n<li><p>仓库（Registry）：</p>\n<p>仓库是用于存储和分发镜像的集中化平台，分为公共仓库（如Docker Hub）和私有仓库（如自建Harbor）。镜像通过<code>docker push</code>上传到仓库，通过<code>docker pull</code>下载。</p>\n</li>\n</ul>\n<p>三者之间的关系可以用下图表示：</p>\n<p><img src=\"/img/%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/docker%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"img\"></p>\n<h3 id=\"底层技术原理\"><a href=\"#底层技术原理\" class=\"headerlink\" title=\"底层技术原理\"></a>底层技术原理</h3><p>相信听到docker的神奇效果，你也会想知道到底docker是如何实现这样神奇的功效的，下面来介绍一下Docker容器化技术所使用到的两大核心底层技术：命名空间（Namespace）和控制组（CGroup）。</p>\n<hr>\n<h4 id=\"1-命名空间（Namespace）\"><a href=\"#1-命名空间（Namespace）\" class=\"headerlink\" title=\"1. 命名空间（Namespace）\"></a>1. <strong>命名空间（Namespace）</strong></h4><p>命名空间是Linux内核提供的一种隔离机制，用于将系统资源（如进程、网络、文件系统等）划分为独立的虚拟空间，使得每个命名空间中的资源对其他命名空间不可见。容器通过命名空间实现资源隔离，确保每个容器拥有独立的运行环境。</p>\n<p><strong>主要命名空间类型</strong>：</p>\n<ul>\n<li><strong>PID Namespace</strong>：隔离进程ID，容器内的进程从PID 1开始，与宿主机进程隔离。</li>\n<li><strong>Mount Namespace</strong>：隔离文件系统挂载点，容器拥有独立的文件系统视图。</li>\n<li><strong>Network Namespace</strong>：隔离网络接口、IP地址、路由表等，容器拥有独立的网络栈。</li>\n<li><strong>UTS Namespace</strong>：隔离主机名和域名，容器可以拥有独立的主机名。</li>\n<li><strong>IPC Namespace</strong>：隔离进程间通信（如消息队列、共享内存）。</li>\n<li><strong>User Namespace</strong>：隔离用户和用户组ID，容器内的root用户不等于宿主机的root用户。</li>\n</ul>\n<p><strong>作用</strong>：</p>\n<ul>\n<li>提供资源隔离，确保容器之间互不干扰。</li>\n<li>增强安全性，限制容器对宿主机和其他容器的影响。</li>\n</ul>\n<hr>\n<h4 id=\"2-控制组（CGroup）\"><a href=\"#2-控制组（CGroup）\" class=\"headerlink\" title=\"2. 控制组（CGroup）\"></a>2. <strong>控制组（CGroup）</strong></h4><p>控制组是Linux内核提供的一种资源管理机制，用于限制、记录和隔离进程组的资源使用（如CPU、内存、磁盘I&#x2F;O等）。容器通过CGroup实现资源限制和优先级控制，确保容器不会过度占用宿主机资源。</p>\n<p><strong>主要功能</strong>：</p>\n<ul>\n<li>资源限制：限制容器使用的CPU、内存、磁盘I&#x2F;O等资源。</li>\n<li>优先级控制：为容器分配资源使用优先级。</li>\n<li>资源统计：记录容器的资源使用情况，便于监控和优化。</li>\n<li><strong>进程控制</strong>：冻结、恢复或终止容器内的进程。</li>\n</ul>\n<p><strong>作用</strong>：</p>\n<ul>\n<li>防止单个容器耗尽宿主机资源，影响其他容器或系统稳定性。</li>\n<li>提供细粒度的资源管理，优化资源利用率。</li>\n</ul>\n<hr>\n<h4 id=\"命名空间与CGroup的关系\"><a href=\"#命名空间与CGroup的关系\" class=\"headerlink\" title=\"命名空间与CGroup的关系\"></a><strong>命名空间与CGroup的关系</strong></h4><ul>\n<li><strong>命名空间</strong>：负责资源隔离，确保容器拥有独立的运行环境。</li>\n<li><strong>CGroup</strong>：负责资源限制，确保容器不会过度占用资源。<br>两者结合，共同实现容器的轻量级虚拟化和资源管理。</li>\n</ul>\n<h2 id=\"Docker实用工具和生态\"><a href=\"#Docker实用工具和生态\" class=\"headerlink\" title=\"Docker实用工具和生态\"></a>Docker实用工具和生态</h2><ol>\n<li><p><strong>开发与部署工具</strong>  </p>\n<ul>\n<li><strong>Docker Compose</strong>：多容器编排的YAML定义（<code>docker-compose.yml</code>）。</li>\n<li><strong>Docker Swarm</strong>：原生集群管理（与Kubernetes的定位差异）。</li>\n<li><strong>Kubernetes集成</strong>：Docker作为容器运行时（CRI规范）。</li>\n</ul>\n</li>\n<li><p><strong>镜像与安全工具</strong>  </p>\n<ul>\n<li><strong>Docker Slim</strong>：镜像瘦身优化。</li>\n<li><strong>Trivy&#x2F;Clair</strong>：镜像漏洞扫描。</li>\n<li><strong>Docker Bench for Security</strong>：安全基线检查。</li>\n</ul>\n</li>\n<li><p><strong>监控与可视化</strong>  </p>\n<ul>\n<li><strong>cAdvisor</strong>：容器资源监控。</li>\n<li><strong>Portainer</strong>：图形化管理界面。</li>\n</ul>\n</li>\n<li><p><strong>CI&#x2F;CD场景实践</strong>  </p>\n<ul>\n<li><strong>GitLab CI与Docker</strong>：自动化构建与测试。</li>\n<li><strong>Jenkins Pipeline</strong>：容器化构建环境配置。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a><strong>结语</strong></h3><p>在当前的云计算领域，K8S已经成为编排部署的事实标准，而K8S正是使用容器化技术作为根基，随着越来越多的人使用容器化技术，容器化将继续为人们带来高效便捷的部署能力，并发展出新的功能特性，反过来推动云原生发展壮大。本文碍于篇幅，只对核心概念和原理等做了简要概述，该系列文章后续将更侧重于实际的使用，我们下一篇文章再见！</p>\n<hr>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><strong>参考资料</strong></h3><p><a href=\"https://www.docker.com/\">Docker: Accelerated Container Application Development</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/126687430\">Docker容器技术介绍（内含详细教程） - 知乎</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Docker_(software)\">Docker (software) - Wikipedia</a></p>\n","excerpt":"","more":"<h2 id=\"Docker技术简介\"><a href=\"#Docker技术简介\" class=\"headerlink\" title=\"Docker技术简介\"></a>Docker技术简介</h2><p>Docker，目前非常热门的一项技术，只要你从事软件开发，就一定听说过这项技术。那，Docker究竟是什么？让我们来看下维基百科对它下的定义：<strong>Docker 是一种工具，用于在轻量级容器中自动部署应用程序，以便应用程序可以在不同的环境中隔离高效工作</strong>。Docker容器技术在云计算时代是非常重要的技术底座，极大地提升了程序的部署和分发效率。</p>\n<h2 id=\"为什么要使用Docker\"><a href=\"#为什么要使用Docker\" class=\"headerlink\" title=\"为什么要使用Docker\"></a>为什么要使用Docker</h2><p>为什么要使用Docker？在回答这个问题之前，我们需要先看一下在容器技术出现之前，大家是使用什么环境去部署应用程序的。</p>\n<p>在Docker技术之前，大家基本上是使用虚拟机来进行应用部署的。比方说，我开发了一个qq这样的应用程序，我需要部署它的服务端，我需要将qq的软件包上传到虚拟机上，再对虚拟机上的环境变量或者配置文件进行编辑，最终，再使用启动脚本运行该程序，这就是一个常见的部署场景，但是，这中间有两个问题，第一个问题是<strong>多实例的扩容非常麻烦</strong>，假设需要在另一台服务器上再部署该程序，需要将虚拟机上的应用程序打包，同时还要在另一台服务器上安装各种各样的依赖，如果已经做成标准化的脚本还好，要是没有，那得麻烦死；第二个问题是<strong>虚拟机本身是重载的，消耗资源</strong>，运行虚拟机本身就是很耗费资源的一件事，同时，如果在一个虚拟机上跑多个应用程序，程序之间可能会存在互相影响，导致多个应用程序运行异常。</p>\n<p>为了解决上面提到的两个问题，Docker技术应运而生，同时兼顾了轻量化、隔离性好和容易迁移的特性。</p>\n<p>应用在容器中运行，容器运行在宿主机上，每个容器是单独的、互相隔离的环境。容器的应用部署架构图和虚拟机的应用架构部署图如下，区别在于虚拟机部署需要一套重载的OS系统，这消耗了大量不必要的资源。</p>\n<p><img src=\"/img/%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/%E5%AE%B9%E5%99%A8VS%E8%99%9A%E6%8B%9F%E6%9C%BA.png\" alt=\"img\"></p>\n<h2 id=\"Docker技术原理\"><a href=\"#Docker技术原理\" class=\"headerlink\" title=\"Docker技术原理\"></a>Docker技术原理</h2><h3 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h3><p>在Docker技术中，有以下三种核心概念：</p>\n<ul>\n<li><p>镜像（Image)：</p>\n<p>镜像是容器的静态模板，包含运行应用程序所需的所有文件和配置。镜像由多层只读文件系统组成，每一层代表一个构建步骤（如安装软件、添加文件）。镜像通过<code>Dockerfile</code>定义，使用<code>docker build</code>命令构建。</p>\n</li>\n<li><p>容器（Container)：</p>\n<p>容器是Docker的核心运行单元，是一个轻量级、独立、可执行的软件包，包含应用程序及其所有依赖项（如库、环境变量、配置文件）。容器基于镜像创建，运行在隔离的用户空间中，与宿主机共享操作系统内核，但拥有独立的文件系统、网络和进程空间。</p>\n</li>\n<li><p>仓库（Registry）：</p>\n<p>仓库是用于存储和分发镜像的集中化平台，分为公共仓库（如Docker Hub）和私有仓库（如自建Harbor）。镜像通过<code>docker push</code>上传到仓库，通过<code>docker pull</code>下载。</p>\n</li>\n</ul>\n<p>三者之间的关系可以用下图表示：</p>\n<p><img src=\"/img/%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/docker%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"img\"></p>\n<h3 id=\"底层技术原理\"><a href=\"#底层技术原理\" class=\"headerlink\" title=\"底层技术原理\"></a>底层技术原理</h3><p>相信听到docker的神奇效果，你也会想知道到底docker是如何实现这样神奇的功效的，下面来介绍一下Docker容器化技术所使用到的两大核心底层技术：命名空间（Namespace）和控制组（CGroup）。</p>\n<hr>\n<h4 id=\"1-命名空间（Namespace）\"><a href=\"#1-命名空间（Namespace）\" class=\"headerlink\" title=\"1. 命名空间（Namespace）\"></a>1. <strong>命名空间（Namespace）</strong></h4><p>命名空间是Linux内核提供的一种隔离机制，用于将系统资源（如进程、网络、文件系统等）划分为独立的虚拟空间，使得每个命名空间中的资源对其他命名空间不可见。容器通过命名空间实现资源隔离，确保每个容器拥有独立的运行环境。</p>\n<p><strong>主要命名空间类型</strong>：</p>\n<ul>\n<li><strong>PID Namespace</strong>：隔离进程ID，容器内的进程从PID 1开始，与宿主机进程隔离。</li>\n<li><strong>Mount Namespace</strong>：隔离文件系统挂载点，容器拥有独立的文件系统视图。</li>\n<li><strong>Network Namespace</strong>：隔离网络接口、IP地址、路由表等，容器拥有独立的网络栈。</li>\n<li><strong>UTS Namespace</strong>：隔离主机名和域名，容器可以拥有独立的主机名。</li>\n<li><strong>IPC Namespace</strong>：隔离进程间通信（如消息队列、共享内存）。</li>\n<li><strong>User Namespace</strong>：隔离用户和用户组ID，容器内的root用户不等于宿主机的root用户。</li>\n</ul>\n<p><strong>作用</strong>：</p>\n<ul>\n<li>提供资源隔离，确保容器之间互不干扰。</li>\n<li>增强安全性，限制容器对宿主机和其他容器的影响。</li>\n</ul>\n<hr>\n<h4 id=\"2-控制组（CGroup）\"><a href=\"#2-控制组（CGroup）\" class=\"headerlink\" title=\"2. 控制组（CGroup）\"></a>2. <strong>控制组（CGroup）</strong></h4><p>控制组是Linux内核提供的一种资源管理机制，用于限制、记录和隔离进程组的资源使用（如CPU、内存、磁盘I&#x2F;O等）。容器通过CGroup实现资源限制和优先级控制，确保容器不会过度占用宿主机资源。</p>\n<p><strong>主要功能</strong>：</p>\n<ul>\n<li>资源限制：限制容器使用的CPU、内存、磁盘I&#x2F;O等资源。</li>\n<li>优先级控制：为容器分配资源使用优先级。</li>\n<li>资源统计：记录容器的资源使用情况，便于监控和优化。</li>\n<li><strong>进程控制</strong>：冻结、恢复或终止容器内的进程。</li>\n</ul>\n<p><strong>作用</strong>：</p>\n<ul>\n<li>防止单个容器耗尽宿主机资源，影响其他容器或系统稳定性。</li>\n<li>提供细粒度的资源管理，优化资源利用率。</li>\n</ul>\n<hr>\n<h4 id=\"命名空间与CGroup的关系\"><a href=\"#命名空间与CGroup的关系\" class=\"headerlink\" title=\"命名空间与CGroup的关系\"></a><strong>命名空间与CGroup的关系</strong></h4><ul>\n<li><strong>命名空间</strong>：负责资源隔离，确保容器拥有独立的运行环境。</li>\n<li><strong>CGroup</strong>：负责资源限制，确保容器不会过度占用资源。<br>两者结合，共同实现容器的轻量级虚拟化和资源管理。</li>\n</ul>\n<h2 id=\"Docker实用工具和生态\"><a href=\"#Docker实用工具和生态\" class=\"headerlink\" title=\"Docker实用工具和生态\"></a>Docker实用工具和生态</h2><ol>\n<li><p><strong>开发与部署工具</strong>  </p>\n<ul>\n<li><strong>Docker Compose</strong>：多容器编排的YAML定义（<code>docker-compose.yml</code>）。</li>\n<li><strong>Docker Swarm</strong>：原生集群管理（与Kubernetes的定位差异）。</li>\n<li><strong>Kubernetes集成</strong>：Docker作为容器运行时（CRI规范）。</li>\n</ul>\n</li>\n<li><p><strong>镜像与安全工具</strong>  </p>\n<ul>\n<li><strong>Docker Slim</strong>：镜像瘦身优化。</li>\n<li><strong>Trivy&#x2F;Clair</strong>：镜像漏洞扫描。</li>\n<li><strong>Docker Bench for Security</strong>：安全基线检查。</li>\n</ul>\n</li>\n<li><p><strong>监控与可视化</strong>  </p>\n<ul>\n<li><strong>cAdvisor</strong>：容器资源监控。</li>\n<li><strong>Portainer</strong>：图形化管理界面。</li>\n</ul>\n</li>\n<li><p><strong>CI&#x2F;CD场景实践</strong>  </p>\n<ul>\n<li><strong>GitLab CI与Docker</strong>：自动化构建与测试。</li>\n<li><strong>Jenkins Pipeline</strong>：容器化构建环境配置。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a><strong>结语</strong></h3><p>在当前的云计算领域，K8S已经成为编排部署的事实标准，而K8S正是使用容器化技术作为根基，随着越来越多的人使用容器化技术，容器化将继续为人们带来高效便捷的部署能力，并发展出新的功能特性，反过来推动云原生发展壮大。本文碍于篇幅，只对核心概念和原理等做了简要概述，该系列文章后续将更侧重于实际的使用，我们下一篇文章再见！</p>\n<hr>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><strong>参考资料</strong></h3><p><a href=\"https://www.docker.com/\">Docker: Accelerated Container Application Development</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/126687430\">Docker容器技术介绍（内含详细教程） - 知乎</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Docker_(software)\">Docker (software) - Wikipedia</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm7r36g0d0000cctyaknfgbb9","category_id":"cm7r3clyx00000ctyg33qabty","_id":"cm7r3clyz00030ctybplffeke"},{"post_id":"cm7r3gl5l000034ty189c05us","category_id":"cm7r3ilv3000134ty9p2mbb0b","_id":"cm7r3ilv6000434ty6xnng8ll"},{"post_id":"cm7rh3cyn0000asty28ke56oc","category_id":"cm7r3ruoh00029sty4kah5xhr","_id":"cm7rh3cyp0004asty1dw0eylj"},{"post_id":"cm7rh3cyn0000asty28ke56oc","category_id":"cm7r3ruoi00049sty62iy89kg","_id":"cm7rh3cyp0005asty4rnn81kd"}],"PostTag":[{"post_id":"cm7r36g0d0000cctyaknfgbb9","tag_id":"cm7r3clyy00010cty906whtdm","_id":"cm7r3clyy00020ctyb4212vaq"},{"post_id":"cm7r36g0d0000cctyaknfgbb9","tag_id":"cm7r3cyef00040ctycdv690pv","_id":"cm7r3cyeg00050ctyhm3sejkn"},{"post_id":"cm7r3gl5l000034ty189c05us","tag_id":"cm7r3ilv4000234tyeftmdza8","_id":"cm7r3ilv6000534ty24cj817v"},{"post_id":"cm7r3gl5l000034ty189c05us","tag_id":"cm7r3cyef00040ctycdv690pv","_id":"cm7r3ilv6000634ty6wdqa7sn"},{"post_id":"cm7r3gl5l000034ty189c05us","tag_id":"cm7r3ilv5000334tyai4w2p92","_id":"cm7r3ilv6000734ty6a8k2r2j"},{"post_id":"cm7rh3cyn0000asty28ke56oc","tag_id":"cm7r3ruog00019sty1lfqbda6","_id":"cm7rh3cyp0001asty064rf6zk"},{"post_id":"cm7rh3cyn0000asty28ke56oc","tag_id":"cm7r3ruoi00039sty66dq7wv8","_id":"cm7rh3cyp0002astygmt9dmdi"},{"post_id":"cm7rh3cyn0000asty28ke56oc","tag_id":"cm7r3ruoi00059styfddsdd8w","_id":"cm7rh3cyp0003asty6zqg08mg"}],"Tag":[{"name":"设计模式","_id":"cm7r3clyy00010cty906whtdm"},{"name":"Java","_id":"cm7r3cyef00040ctycdv690pv"},{"name":"HashMap","_id":"cm7r3ilv4000234tyeftmdza8"},{"name":"手写","_id":"cm7r3ilv5000334tyai4w2p92"},{"name":"容器","_id":"cm7r3ruog00019sty1lfqbda6"},{"name":"Docker","_id":"cm7r3ruoi00039sty66dq7wv8"},{"name":"镜像","_id":"cm7r3ruoi00059styfddsdd8w"}]}}